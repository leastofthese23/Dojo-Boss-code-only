Option Compare Database
    
Dim sDate As String
Dim sDate1 As String
Dim sDate2 As String
Dim sSQL As String
Dim sName As String
Dim sStudentName As String
Dim sFirstDayOfMonth As String
Dim sLastDayOfMonth As String
Dim sMonth As String
Dim sYear As String
Dim sMonthNumber As String
Dim sStudent As String
Dim sStatusUpOrDown As String

Dim i As Integer
Dim j As Integer
Dim iStudentID As Integer
Dim iRecordCount As Integer
Dim iNumberOfDateEntriesForMonth As Integer
Dim iDateEntryRow As Integer
Dim iMonthsInGrade As Integer
    
Dim sArray(75) As String

Dim bytNodiaftm As Byte

Dim dtToday As Date
Dim dtDate1 As Date
Dim dtDate2 As Date
    
Dim boolValidDate As Boolean
Dim boolDateExists As Boolean
Dim boolStudentsPresent As Boolean
Dim boolAllIdsAdded As Boolean
Dim boolAllGood As Boolean
Dim boolAttendanceStatusChange As Boolean
Dim boolStudentSelected As Boolean
Dim boolRecordsExist As Boolean
Dim boolThereIsAnotherDate As Boolean

Dim dbs As DAO.Database
Dim rs As DAO.Recordset
Dim rs2 As DAO.Recordset
Dim rsNames As DAO.Recordset
Dim rsAttendance As DAO.Recordset





Private Sub Form_Open(Cancel As Integer)
    Call setTheDateToToday 'get today's date, sets the variable dtToday in the format "mmddyyyy", puts the date in txtDate
    sDate = dtToday
    Call connectToDB
    Call seeIfDateExistsInTable 'takes the variable sDate. sets the variable boolDateExists
    If (boolDateExists = True) Then
        Call seeIfAnyStudentsWerePresentOnThisDate 'takes the variable sDate, sets the variable boolStudentsPresent
        
        If (boolStudentsPresent = True) Then
            Call updateListBoxToDisplayStudentsPresent 'takes rs (loaded from seeIfAnyStudentsWerePresentOnThisDate function), displays non-null values in listbox.
            Call updateCombosToNotHaveStudentsAlreadyPresentOnThisDay
        Else
            Call setListBoxToNoResults
            Me.comboStudent1.RowSource = "SELECT s.[studentID], s.[studentName] FROM Students AS s ORDER BY s.[studentName] ASC;"
        End If
        
    Else
        Call setListBoxToNoResults
        Me.comboStudent1.RowSource = "SELECT s.[studentID], s.[studentName] FROM Students AS s ORDER BY s.[studentName] ASC;"
    End If
    
    Call getMonthAndPutInMonthSearch 'takes the variable dtToday (set in setTheDateToToday method), sets month and year search
    'Call searchForStudentsPresentInSelectedMonth
    
    Me.lblDateToRemove.Caption = Me.txtDate.Value
    Call updateComboStudentsPresent 'takes the variables boolDateExists (set by function "seeIfDateExistsInTable") and the rs (loaded by "seeIfAnyStudentsWerePresentOnThisDate" function, if applicable)
                                    'also sets remove button to enables or not enabled.

    Me.comboStudent1.BorderColor = 12566463 'grey
End Sub



Private Sub btnAttendance_Click()
    DoCmd.OpenForm FormName:="AttendanceTracking"
End Sub

Private Sub btnCalendar_Click()
    Forms("Home").openCalendar
End Sub

Private Sub btnClear_Click()
    Call clearComboBoxes
End Sub

Function clearComboBoxes()
    Me.comboStudent1 = ""
    'Me.comboStudent2 = ""
    'Me.comboStudent3 = ""
    'Me.comboStudent4 = ""
    'Me.comboStudent5 = ""
End Function

Private Sub btnFinancials_Click()
    DoCmd.OpenForm FormName:="Financials"
End Sub

Private Sub btnForms_Click()
    DoCmd.OpenForm FormName:="DojoForms"
End Sub

Private Sub btnGear_Click()
    DoCmd.OpenForm FormName:="Settings"
End Sub

Private Sub btnHome_Click()
    DoCmd.OpenForm FormName:="Home"
End Sub

Private Sub btnMessaging_Click()
    DoCmd.OpenForm FormName:="Messaging"
End Sub

Private Sub btnRefresh_Click()
On Error Resume Next
    Me.Refresh
    Call txtDate_LostFocus
    Call querySelectedAttendanceCriteria
End Sub




Private Sub btnRemove_GotFocus() 'removes an attendance record. If days of attendance for the month went from 6 to 5 then the student is considered not actively attending for the month and a status change function is triggered.
On Error Resume Next
    Dim sColumnName, sFields As String

    iStudentID = Me.comboStudentsPresent.Column(0)
    'MsgBox ("iStudentID = " & iStudentID)
    If (iStudentID = 14) Or (IsNull(Me.comboStudentsPresent.Value)) Then
        'MsgBox ("please select a student")
        Me.comboStudentsPresent.BorderColor = 255 'red
        Me.comboStudentsPresent.SetFocus
    Else
        'in the row where the date matches, check each column for the selected student ID. If found, remove it (set to 14)
        Me.comboStudentsPresent.BorderColor = 12566463 'grey
        sDate = Me.lblDateToRemove.Caption
        
                 
        sSQL = "SELECT * FROM Attendance AS a WHERE a.[attendanceDate] = #" & sDate & "#;"
        
        'we already know the date when the student was present (the student's attendance date record that we will remove), now we need to find the column where the student's ID is present.
        Call connectToDB
        Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
        If (rs.RecordCount > 0) Then
            rs.MoveFirst
            i = 1
            Do While (i < 76)
                sFields = CStr(rs.Fields(i))
                If (iStudentID = sFields) Then
                    sColumnName = ("studentID" & i)
                    Exit Do
                End If
                i = (i + 1)
            Loop
        Else
            sColumnName = ""
        End If

        Call getNumberOfAttendanceDaysForTheMonth 'takes the variables (iStudentID, sDate), sets the variable bytNodiaftm
        
        sSQL = "UPDATE Attendance SET " & sColumnName & " = 14 WHERE Attendance.[attendanceDate] = #" & sDate & "#;" '14 is the dummy ID
        
        'MsgBox ("sSQL = " & sSQL)
        DoCmd.RunSQL sSQL
        
        'if the number of days in attendance for the month is now 5, then that means the status changed from in attendance to not in attendance.
        
        Call seeIfAttendanceStatusForMonthDecreased 'takes the variables (iStudentID, sDate, bytNodiaftm), sets the variables (boolAttendanceStatusChange, sStatusUpOrDown)
        If (boolAttendanceStatusChange = True) Then
            MsgBox ("ATTENDANCE DOWNGRADE: NOT ENOUGH days in attendance for the calendar month to count towards attendance.")
            Call updateAttendanceStatusInStudentsTable 'takes the variables (sStatusUpOrDown, iStudentID), updates the Students table.
        Else
            'MsgBox ("Attendance status did not change from 6 to 5.")
        End If
        
        Call deleteDateIfAllStudentsRemoved 'takes the variable sDate
        
        Call btnRefresh_Click
    End If
    
    Me.comboSeeHistoryMonth.SetFocus
End Sub 'End btnRemove_GotFocus

Function updateAttendanceStatusInStudentsTable() 'takes the variables (sStatusUpOrDown, iStudentID), updates the Students table

    Call getMonthsInGrade 'takes the variable iStudentID, sets the variable iMonthsInGrade
    
    'MsgBox ("now in updateAttendanceStatusInStudentsTable(). sStatusUpOrDown = '" & sStatusUpOrDown & "'")
    
    If (sStatusUpOrDown = "down") Then
        iMonthsInGrade = (iMonthsInGrade - 1)
    Else
        iMonthsInGrade = (iMonthsInGrade + 1)
    End If
    
    sSQL = "UPDATE Students SET Students.[monthsInRank] = " & iMonthsInGrade & " WHERE Students.[studentID] = " & iStudentID & ";"
    DoCmd.RunSQL sSQL
    
End Function

Function getMonthsInGrade() 'takes the variable iStudentID, sets the variable iMonthsInGrade
    sSQL = "SELECT s.[monthsInRank] FROM Students AS s WHERE s.[studentID] = " & iStudentID
    Call connectToDB
    
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If (rs.RecordCount > 0) Then
        iMonthsInGrade = rs.Fields(0)
    End If
    
    'key words: get months in grade, get time in grade, get months in rank, get time in rank
End Function

Function deleteDateIfAllStudentsRemoved() 'takes the variable sDate
On Error Resume Next
Dim boolDateIsEmpty As Boolean

    sSQL = "SELECT a.[studentID1], a.[studentID2], a.[studentID3], a.[studentID4], a.[studentID5], a.[studentID6], a.[studentID7], a.[studentID8], a.[studentID9], a.[studentID10], " & _
                 "a.[studentID11], a.[studentID12], a.[studentID13], a.[studentID14], a.[studentID15], a.[studentID16], a.[studentID17], a.[studentID18], a.[studentID19], a.[studentID20], " & _
                 "a.[studentID21], a.[studentID22], a.[studentID23], a.[studentID24], a.[studentID25], a.[studentID26], a.[studentID27], a.[studentID28], a.[studentID29], a.[studentID30], " & _
                 "a.[studentID31], a.[studentID32], a.[studentID33], a.[studentID34], a.[studentID35], a.[studentID36], a.[studentID37], a.[studentID38], a.[studentID39], a.[studentID40], " & _
                 "a.[studentID41], a.[studentID42], a.[studentID43], a.[studentID44], a.[studentID45], a.[studentID46], a.[studentID47], a.[studentID48], a.[studentID49], a.[studentID50], " & _
                 "a.[studentID51], a.[studentID52], a.[studentID53], a.[studentID54], a.[studentID55], a.[studentID56], a.[studentID57], a.[studentID58], a.[studentID59], a.[studentID60], " & _
                 "a.[studentID61], a.[studentID62], a.[studentID63], a.[studentID64], a.[studentID65], a.[studentID66], a.[studentID67], a.[studentID68], a.[studentID69], a.[studentID70], " & _
                 "a.[studentID71], a.[studentID72], a.[studentID73], a.[studentID74], a.[studentID75] " & _
                 "FROM Attendance AS a WHERE a.[attendanceDate] = #" & sDate & "#;"
                 
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If (rs.RecordCount > 0) Then
    
        iStudentID = 0
        boolDateIsEmpty = True
        i = 0
        Do While (i < 75)
            iStudentID = rs.Fields(i)
            If ((iStudentID <> 0) And (iStudentID <> 14)) Then 'if a student ID other than 0 or 14 is encountered then the row will not be deleted.
                boolDateIsEmpty = False
                Exit Do
            End If
            i = (i + 1)
        Loop
        
        If (boolDateIsEmpty = True) Then
            sSQL = "DELETE FROM Attendance WHERE Attendance.[attendanceDate] = #" & sDate & "#;"
            DoCmd.RunSQL sSQL
        End If
        
    End If
    
End Function

Function saveAttendanceRecord()
On Error Resume Next
    Set dbs = CurrentDb
    DoCmd.SetWarnings False
    sDate = Me.txtDate.Value 'get the date

    iStudentID = Me.comboStudent1.Column(0)
    
    If (iStudentID = 14) Or IsNull(iStudentID) Then
        Me.comboStudent1.BorderColor = 255 'red
        Me.comboStudent1.SetFocus
    Else
        Me.comboStudent1.BorderColor = 12566463 'grey
        Call getNumberOfAttendanceDaysForTheMonth 'takes the variables (iStudentID, sDate), sets the variable bytNodiaftm
        Call addStudentToTableOnSelectedDate 'takes the variables (sDate, iStudentID)
        
        Call seeIfAttendanceStatusForMonthIncreased 'takes the variables (iStudentID, sDate, bytNodiaftm), sets the variables (boolAttendanceStatusChange, sStatusUpOrDown)
        If (boolAttendanceStatusChange = True) Then
            MsgBox "ATTENDANCE UPGRADE: Student now has enough days of attendance (6) to be considered actively in attendance for the month."
            Call updateAttendanceStatusInStudentsTable 'takes the variables (sStatusUpOrDown, iStudentID), updates the Students table
        End If
        Call btnRefresh_Click 'also calls the txtDate lost focus procedure, which will update the remove combo box to only have students already marked as present
    End If
End Function

Function getNumberOfAttendanceDaysForTheMonth() 'takes the variables (iStudentID, sDate), sets the variable bytNodiaftm
On Error Resume Next
    
    Dim iStudintID As Integer
    sDate = Me.txtDate.Value
    sYear = Right(sDate, 4)
    Call getMonthFromDate 'takes the variable sDate(1/2/2017 format), sets sMonth variable ("January" format)
    Call getAndSetLastDayOfMonth 'takes the variables (sMonth("January" format), sYear) sets the variable sLastDayOfMonth
    Call getMonthNumberFromMonthName 'takes the variable sMonth, sets the variable sMonthNumber
    If (sMonthNumber = "0") Then
        sMonthNumber = "01"
        sFirstDayOfMonth = ("01/01/" & sYear)
        sLastDayOfMonth = ("12/31/" & sYear)
    Else
        sFirstDayOfMonth = (sMonthNumber & "/01/" & sYear)
        sLastDayOfMonth = (sMonthNumber & "/" & sLastDayOfMonth & "/" & sYear)
    End If
    
    bytNodiaftm = 0
    
    sSQL = "SELECT a.[studentID1], a.[studentID2], a.[studentID3], a.[studentID4], a.[studentID5], a.[studentID6], a.[studentID7], a.[studentID8], a.[studentID9], a.[studentID10], " & _
                 "a.[studentID11], a.[studentID12], a.[studentID13], a.[studentID14], a.[studentID15], a.[studentID16], a.[studentID17], a.[studentID18], a.[studentID19], a.[studentID20], " & _
                 "a.[studentID21], a.[studentID22], a.[studentID23], a.[studentID24], a.[studentID25], a.[studentID26], a.[studentID27], a.[studentID28], a.[studentID29], a.[studentID30], " & _
                 "a.[studentID31], a.[studentID32], a.[studentID33], a.[studentID34], a.[studentID35], a.[studentID36], a.[studentID37], a.[studentID38], a.[studentID39], a.[studentID40], " & _
                 "a.[studentID41], a.[studentID42], a.[studentID43], a.[studentID44], a.[studentID45], a.[studentID46], a.[studentID47], a.[studentID48], a.[studentID49], a.[studentID50], " & _
                 "a.[studentID51], a.[studentID52], a.[studentID53], a.[studentID54], a.[studentID55], a.[studentID56], a.[studentID57], a.[studentID58], a.[studentID59], a.[studentID60], " & _
                 "a.[studentID61], a.[studentID62], a.[studentID63], a.[studentID64], a.[studentID65], a.[studentID66], a.[studentID67], a.[studentID68], a.[studentID69], a.[studentID70], " & _
                 "a.[studentID71], a.[studentID72], a.[studentID73], a.[studentID74], a.[studentID75] " & _
                 "FROM Attendance AS a WHERE a.[attendanceDate] BETWEEN #" & sFirstDayOfMonth & "# AND #" & sLastDayOfMonth & "#;"
                 
                 
    Call connectToDB
    Set rsAttendance = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If (rsAttendance.RecordCount > 0) Then
        rsAttendance.MoveLast: iRecordCount = rsAttendance.RecordCount
        rsAttendance.MoveFirst
        i = 0
        Do While (i < iRecordCount) 'iterate through each record/row
            j = 0
            Do While (j < 2)
                iStudintID = 0
                iStudintID = rsAttendance.Fields(j)
                If (iStudintID = iStudentID) Then 'if column contains the ID we are searching for
                    bytNodiaftm = (bytNodiaftm + 1)
                End If
                j = (j + 1)
            Loop
                
            i = (i + 1)
            rsAttendance.MoveNext
        Loop
    Else
        'MsgBox "rsAttendance.RecordCount is 0"
    End If
    
End Function

Function seeIfAttendanceStatusForMonthIncreased() 'takes the variables (iStudentID, sDate, bytNodiaftm), sets the variable boolAttendanceStatusChange
    Dim bytPreviousAttendance As Byte
    
    boolAttendanceStatusChange = False
    bytPreviousAttendance = bytNodiaftm
    If (bytPreviousAttendance = 5) Then
        Call getNumberOfAttendanceDaysForTheMonth
        If (bytNodiaftm > 5) Then
            boolAttendanceStatusChange = True
            sStatusUpOrDown = "up"
        End If
    Else: 'do nothing. the status is not changing.
    End If
End Function


Function seeIfAttendanceStatusForMonthDecreased() 'takes the variables (iStudentID, sDate, bytNodiaftm), sets the variables (boolAttendanceStatusChange, sStatusUpOrDown)
    Dim bytPreviousAttendance As Byte
    
    boolAttendanceStatusChange = False
    bytPreviousAttendance = bytNodiaftm
    
    If (bytPreviousAttendance = 6) Then 'if attendance is 6
        'MsgBox ("looks like a downgrade to me")
            boolAttendanceStatusChange = True
            sStatusUpOrDown = "down"
    Else: 'do nothing. the status is not changing.
    End If
End Function


Function getMonthFromDate() 'takes the variable sDate(1/2/2017 format), sets sMonth variable
    Dim sFirstTwoChars As String

    sFirstTwoChars = Left(sDate, 2)
    If (sFirstTwoChars = "1/") Then
        sMonth = "January"
    ElseIf (sFirstTwoChars = "2/") Then
        sMonth = "February"
    ElseIf (sFirstTwoChars = "3/") Then
        sMonth = "March"
    ElseIf (sFirstTwoChars = "4/") Then
        sMonth = "April"
    ElseIf (sFirstTwoChars = "5/") Then
        sMonth = "May"
    ElseIf (sFirstTwoChars = "6/") Then
        sMonth = "June"
    ElseIf (sFirstTwoChars = "7/") Then
        sMonth = "July"
    ElseIf (sFirstTwoChars = "8/") Then
        sMonth = "August"
    ElseIf (sFirstTwoChars = "9/") Then
        sMonth = "September"
    ElseIf (sFirstTwoChars = "10") Then
        sMonth = "October"
    ElseIf (sFirstTwoChars = "11") Then
        sMonth = "November"
    ElseIf (sFirstTwoChars = "12") Then
        sMonth = "December"
    End If
    
End Function

Function getStudentIdMatchingName() 'takes the variable sStudentName, sets the variable iStudentID
    Call connectToDB
    sSQL = "SELECT s.[studentID] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
        
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If (rs.RecordCount > 0) Then
        rs.MoveFirst
        iStudentID = rs.Fields(0)
    Else
        
    End If
End Function

Function addStudentToTableOnSelectedDate() 'takes the variables (sDate, iStudentID)
    'check if this date already exists in the DB.
    sSQL = "SELECT a.[attendanceDate] FROM Attendance AS a WHERE a.[attendanceDate] = #" & sDate & "#;"
    'MsgBox ("sSQL = '" & sSQL & "'")
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        'MsgBox ("This date already exists in the DB")
        'if the date already exists, do an update.
        'check in table where date matches; if ID1 is null or ID 14, add to ID1 and on. if ID1 is not null, go to next ID and keep checking until column is found with no ID added, then add.
        'if column 75 is reached, then display error message.
        boolAllIdsAdded = False
        i = 1
        Do While (i <= 76)
            If (i = 76) Then
                MsgBox ("The database table is full, no more students can be added on this date. Please contact tech support if you need assistance. ")
                i = 77
            Else
                sSQL = "SELECT a.[studentID" & i & "] FROM Attendance AS a WHERE a.[attendanceDate] = #" & sDate & "#;" 'we will check to see if the first column for this date is vacant
                Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
                    If rs.RecordCount > 0 Then
                        If (rs.Fields(0) = 14) Then 'if the column is empty/ID 14
                            'insert ID here
                            sSQL = "UPDATE Attendance SET [studentID" & i & "] = " & iStudentID & " WHERE Attendance.[attendanceDate] = #" & sDate & "#;"
                            DoCmd.RunSQL sSQL
                            Call btnClear_Click
                            Call txtDate_LostFocus 'this will set the combo boxes and the list box
                            Exit Do
                        Else
                            'this column is already in use, check next one
                            'loop through. i = i+1 to check next column over
                        End If
                    End If
                i = (i + 1)
            End If
        Loop
    Else
        ' else if the date doesn't exist in the table yet, do an insert statement.
        'MsgBox ("This date does not yet exist in the DB. Will do a insert statement...")
        sSQL = "INSERT INTO Attendance (attendanceDate, studentID1) VALUES (#" & sDate & "#, " & iStudentID & ");"
        DoCmd.RunSQL sSQL

        Call txtDate_LostFocus 'this will set the combo boxes and the list box
    End If
End Function



Private Sub btnSaveAttendance_GotFocus()
    Call saveAttendanceRecord
    Me.comboStudent1.SetFocus
End Sub

Private Sub btnStudents_Click()
    DoCmd.OpenForm FormName:="Students"
End Sub

Private Sub btnStudentsBehind_Click()
    DoCmd.OpenForm FormName:="Students"
End Sub

Private Sub btnTimeInRank_Click()
    DoCmd.OpenForm FormName:="RankReq"
End Sub

Private Sub comboSeeHistoryMonth_AfterUpdate()
    Call querySelectedAttendanceCriteria
End Sub

Private Sub comboSeeHistoryYear_AfterUpdate()
    Call querySelectedAttendanceCriteria
End Sub

Private Sub comboSeeAttHistoryStudent_AfterUpdate()
    Call querySelectedAttendanceCriteria
End Sub

Sub querySelectedAttendanceCriteria()
    On Error Resume Next 'prevent error when assigning iStudentID to null when "" is entered for student
    'options:
    'Option 1) all month, all students
    'Option 2) all month, specific student
    'Option 3) specific month, all students
    'Option 4) specific month, specific student
    'NOTE: a year must always be selected. Specifying a month or student is optional.
    Me.comboSeeAttHistoryStudent.SetFocus 'to prevent "cannot reference if doesn't have focus" error message
    
    'Need to check each criterion to see if the option is all/blank or a value was specified. Then trigger a function/build SQL query depending on what was selected/not selected.
    Call getAndSetYear 'sets the variables (sYear, boolAllGood)
    If (boolAllGood = True) Then 'continue
        sMonth = Me.comboSeeHistoryMonth.Value
        iStudentID = Me.comboSeeAttHistoryStudent.Column(0)
        If (sMonth = "All Months") Then 'check if student was selected or not
            If (Me.comboSeeAttHistoryStudent.Text = "") Then  'no student was selected
                Call attendanceQuearyAllmonthsAllStudents 'option 1
            Else
                Call attendanceQuearyAllmonthsSpecificStudent 'option 2. takes the variable iStudentID
            End If
        Else 'specific month was selected. Check if student was selected or not.
            If (Me.comboSeeAttHistoryStudent.Text = "") Then 'no student was selected
                Call attendanceQuearySpecificMonthAllStudents 'Option 3
            Else
                Call attendanceQuearySpecificMonthSpecificStudent 'Option 4
            End If
        End If
        Me.SubformAttendanceForMonth.Requery
    Else
        MsgBox "Invalid Year"
    End If
End Sub

Function attendanceQuearySpecificMonthAllStudents()
    Call setDates 'sets the variables sDate1 and sDate2
    
    Call truncateIntermediaryTable
    Call connectToDB
    
    sSQL = "SELECT * FROM Attendance " & _
           "WHERE (attendanceDate BETWEEN #" & sDate1 & "# AND #" & sDate2 & "#);"
    'MsgBox sSQL
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    
    If rs.RecordCount > 0 Then
        Call insertValuesIntoIntTable(rs)
    End If
    
End Function

Function attendanceQuearySpecificMonthSpecificStudent()
    Dim anyStudentIdMatches As String
    
    Call setDates 'sets the variables sDate1 and sDate2
    Call truncateIntermediaryTable
    Call connectToDB
    
    anyStudentIdMatches = "studentID1 = " & iStudentID & " OR studentID2 = " & iStudentID & " OR studentID3 = " & iStudentID & " OR studentID4 = " & iStudentID & " OR studentID5 = " & iStudentID & " OR studentID6 = " & iStudentID & " OR studentID7 = " & iStudentID & " OR studentID8 = " & iStudentID & " OR studentID9 = " & iStudentID & _
                          " OR studentID10 = " & iStudentID & " OR studentID11 = " & iStudentID & " OR studentID12 = " & iStudentID & " OR studentID13 = " & iStudentID & " OR studentID14 = " & iStudentID & " OR studentID15 = " & iStudentID & " OR studentID16 = " & iStudentID & " OR studentID17 = " & iStudentID & " OR studentID18 = " & iStudentID & " OR studentID19 = " & iStudentID & _
                          " OR studentID20 = " & iStudentID & " OR studentID21 = " & iStudentID & " OR studentID22 = " & iStudentID & " OR studentID23 = " & iStudentID & " OR studentID24 = " & iStudentID & " OR studentID25 = " & iStudentID & " OR studentID26 = " & iStudentID & " OR studentID27 = " & iStudentID & " OR studentID28 = " & iStudentID & " OR studentID29 = " & iStudentID & _
                          " OR studentID30 = " & iStudentID & " OR studentID31 = " & iStudentID & " OR studentID32 = " & iStudentID & " OR studentID33 = " & iStudentID & " OR studentID34 = " & iStudentID & " OR studentID35 = " & iStudentID & " OR studentID36 = " & iStudentID & " OR studentID37 = " & iStudentID & " OR studentID38 = " & iStudentID & " OR studentID39 = " & iStudentID & _
                          " OR studentID40 = " & iStudentID & " OR studentID41 = " & iStudentID & " OR studentID42 = " & iStudentID & " OR studentID43 = " & iStudentID & " OR studentID44 = " & iStudentID & " OR studentID45 = " & iStudentID & " OR studentID46 = " & iStudentID & " OR studentID47 = " & iStudentID & " OR studentID48 = " & iStudentID & " OR studentID49 = " & iStudentID & _
                          " OR studentID50 = " & iStudentID & " OR studentID51 = " & iStudentID & " OR studentID52 = " & iStudentID & " OR studentID53 = " & iStudentID & " OR studentID54 = " & iStudentID & " OR studentID55 = " & iStudentID & " OR studentID56 = " & iStudentID & " OR studentID57 = " & iStudentID & " OR studentID58 = " & iStudentID & " OR studentID59 = " & iStudentID & _
                          " OR studentID60 = " & iStudentID & " OR studentID61 = " & iStudentID & " OR studentID62 = " & iStudentID & " OR studentID63 = " & iStudentID & " OR studentID64 = " & iStudentID & " OR studentID65 = " & iStudentID & " OR studentID66 = " & iStudentID & " OR studentID67 = " & iStudentID & " OR studentID68 = " & iStudentID & " OR studentID69 = " & iStudentID & _
                          " OR studentID70 = " & iStudentID & " OR studentID71 = " & iStudentID & " OR studentID72 = " & iStudentID & " OR studentID73 = " & iStudentID & " OR studentID74 = " & iStudentID & " OR studentID75 = " & iStudentID
           
    'in this case we can simply use a SELECT INTO SQL query since there is only 1 student. Insert dates first, then insert/update with the name.
    sSQL = "INSERT INTO AttendanceInt (attendanceDate) " & _
           "SELECT attendanceDate " & _
           "FROM Attendance " & _
           "WHERE (attendanceDate BETWEEN #" & sDate1 & "# AND #" & sDate2 & "#) " & _
           "AND (" & anyStudentIdMatches & ");"
           
    'MsgBox sSQL
    DoCmd.RunSQL sSQL
    
    studentName = getStudentNameFromID(iStudentID)
    sSQL = "UPDATE AttendanceInt " & _
           "SET sn1 = '" & studentName & "' " & _
           "WHERE attendanceDate <> NULL;"
           
    DoCmd.RunSQL sSQL
End Function

Function setDates() 'sets the variables sDate1 and sDate2
    sDate1 = (sMonth & "/01/" & sYear)
    'we need to check the month so we can set the correct last day. The last day could be 28, 29, 30 or 31.
    If (sMonth = "January") Then
        sDate2 = (sMonth & "/31/" & sYear)
    ElseIf (sMonth = "February") Then
        'need to check for leap year
        sDate2 = (sMonth & "/29/" & sYear)
        If IsDate(sDate2) Then
            'we're good
        Else
            sDate2 = (sMonth & "/28/" & sYear)
        End If
    ElseIf (sMonth = "March") Then
        sDate2 = (sMonth & "/31/" & sYear)
    ElseIf (sMonth = "April") Then
        sDate2 = (sMonth & "/30/" & sYear)
    ElseIf (sMonth = "May") Then
        sDate2 = (sMonth & "/31/" & sYear)
    ElseIf (sMonth = "June") Then
        sDate2 = (sMonth & "/30/" & sYear)
    ElseIf (sMonth = "July") Then
        sDate2 = (sMonth & "/31/" & sYear)
    ElseIf (sMonth = "August") Then
        sDate2 = (sMonth & "/31/" & sYear)
    ElseIf (sMonth = "September") Then
        sDate2 = (sMonth & "/30/" & sYear)
    ElseIf (sMonth = "October") Then
        sDate2 = (sMonth & "/31/" & sYear)
    ElseIf (sMonth = "November") Then
        sDate2 = (sMonth & "/30/" & sYear)
    ElseIf (sMonth = "December") Then
        sDate2 = (sMonth & "/31/" & sYear)
    End If
    
End Function


Function attendanceQuearyAllmonthsAllStudents() 'Option 1) all month, specific year, all students
    
    sDate1 = ("01/01/" & sYear)
    sDate2 = ("12/31/" & sYear)
    
    Call truncateIntermediaryTable
    Call connectToDB
    
    sSQL = "SELECT * FROM Attendance " & _
           "WHERE (attendanceDate BETWEEN #" & sDate1 & "# AND #" & sDate2 & "#)"
           
    'MsgBox sSQL
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    
    If rs.RecordCount > 0 Then
        Call insertValuesIntoIntTable(rs)
    End If
    
    
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'THE FOLLOWING CODE WILL GET STUDENT NAMES AND DATES AND UPDATE THE INTERMEDIARY TABLE ALL IN ONE SQL COMMAND.
    'THE PROBLEM IS THAT IT WILL ONLY SUPPORT UP TO 30 STUDENTS ON 1 DAY.
    'ADDING ANY ADDITIONAL COMPLEXITY TO THE QUERY WILL RESULT IN A MICROSOFT ACCESS ERROR "QUERY IS TOO COMPLEX"
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'Dim sn1_sn75 As String
    'sn1_sn75 = "sn1, sn2, sn3, sn4, sn5, sn6, sn7, sn8, sn9, " & _
    '           "sn10, sn11, sn12, sn13, sn14, sn15, sn16, sn17, sn18, sn19, " & _
    '           "sn20, sn21, sn22, sn23, sn24, sn25, sn26, sn27, sn28, sn29, " & _
    '           "sn30"
               
    'Dim s75_StudentNames As String
    's75_StudentNames = "s1.studentName, s2.studentName, s3.studentName, s4.studentName, s5.studentName, s6.studentName, s7.studentName, s8.studentName, s9.studentName, " & _
    '                   "s10.studentName, s11.studentName, s12.studentName, s13.studentName, s14.studentName, s15.studentName, s16.studentName, s17.studentName, s18.studentName, s19.studentName, " & _
    '                   "s20.studentName, s21.studentName, s22.studentName, s23.studentName, s24.studentName, s25.studentName, s26.studentName, s27.studentName, s28.studentName, s29.studentName, " & _
    '                   "s30.studentName "
    
    'Dim sStudentsAs As String
    'sStudentsAs = "Students AS s1, Students AS s2, Students AS s3, Students AS s4, Students AS s5, Students AS s6, Students AS s7, Students AS s8, Students AS s9, " & _
    '              "Students AS s10, Students AS s11, Students AS s12, Students AS s13, Students AS s14, Students AS s15, Students AS s16, Students AS s17, Students AS s18, Students AS s19, " & _
    '              "Students AS s20, Students AS s21, Students AS s22, Students AS s23, Students AS s24, Students AS s25, Students AS s26, Students AS s27, Students AS s28, Students AS s29, " & _
    '              "Students AS s30 "
    
    'Dim sMatchingStudentID As String
    'sMatchingStudentID = "(s1.studentID = a.studentID1) AND (s2.studentID = a.studentID2) AND (s3.studentID = a.studentID3) AND (s4.studentID = a.studentID4) AND (s5.studentID = a.studentID5) AND (s6.studentID = a.studentID6) AND (s7.studentID = a.studentID7) AND (s8.studentID = a.studentID8) AND (s9.studentID = a.studentID9) " & _
    '                 "AND (s10.studentID = a.studentID10) AND (s11.studentID = a.studentID11) AND (s12.studentID = a.studentID12) AND (s13.studentID = a.studentID13) AND (s14.studentID = a.studentID14) AND (s15.studentID = a.studentID15) AND (s16.studentID = a.studentID16) AND (s17.studentID = a.studentID17) AND (s18.studentID = a.studentID18) AND (s19.studentID = a.studentID19) " & _
    '                 "AND (s20.studentID = a.studentID20) AND (s21.studentID = a.studentID21) AND (s22.studentID = a.studentID22) AND (s23.studentID = a.studentID23) AND (s24.studentID = a.studentID24) AND (s25.studentID = a.studentID25) AND (s26.studentID = a.studentID26) AND (s27.studentID = a.studentID27) AND (s28.studentID = a.studentID28) AND (s29.studentID = a.studentID29) " & _
    '                 "AND (s30.studentID = a.studentID30)"
    
    
    'sSQL = "INSERT INTO AttendanceInt (attendanceDate, " & sn1_sn75 & ") " & _
    '       "SELECT attendanceDate, " & s75_StudentNames & _
    '       "FROM Attendance AS a, " & sStudentsAs & _
    '       "WHERE (attendanceDate BETWEEN #" & sDate1 & "# AND #" & sDate2 & "#) " & _
    '       "AND " & sMatchingStudentID & ";"
    
    'MsgBox sSQL
    
    'DoCmd.RunSQL sSQL
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    
End Function

Function attendanceQuearyAllmonthsSpecificStudent() 'takes the variable iStudentID
    Dim studentName As String
    Dim anyStudentIdMatches As String
    
    sDate1 = ("01/01/" & sYear)
    sDate2 = ("12/31/" & sYear)
    
    Call truncateIntermediaryTable
    Call connectToDB
    
    anyStudentIdMatches = "studentID1 = " & iStudentID & " OR studentID2 = " & iStudentID & " OR studentID3 = " & iStudentID & " OR studentID4 = " & iStudentID & " OR studentID5 = " & iStudentID & " OR studentID6 = " & iStudentID & " OR studentID7 = " & iStudentID & " OR studentID8 = " & iStudentID & " OR studentID9 = " & iStudentID & _
                          " OR studentID10 = " & iStudentID & " OR studentID11 = " & iStudentID & " OR studentID12 = " & iStudentID & " OR studentID13 = " & iStudentID & " OR studentID14 = " & iStudentID & " OR studentID15 = " & iStudentID & " OR studentID16 = " & iStudentID & " OR studentID17 = " & iStudentID & " OR studentID18 = " & iStudentID & " OR studentID19 = " & iStudentID & _
                          " OR studentID20 = " & iStudentID & " OR studentID21 = " & iStudentID & " OR studentID22 = " & iStudentID & " OR studentID23 = " & iStudentID & " OR studentID24 = " & iStudentID & " OR studentID25 = " & iStudentID & " OR studentID26 = " & iStudentID & " OR studentID27 = " & iStudentID & " OR studentID28 = " & iStudentID & " OR studentID29 = " & iStudentID & _
                          " OR studentID30 = " & iStudentID & " OR studentID31 = " & iStudentID & " OR studentID32 = " & iStudentID & " OR studentID33 = " & iStudentID & " OR studentID34 = " & iStudentID & " OR studentID35 = " & iStudentID & " OR studentID36 = " & iStudentID & " OR studentID37 = " & iStudentID & " OR studentID38 = " & iStudentID & " OR studentID39 = " & iStudentID & _
                          " OR studentID40 = " & iStudentID & " OR studentID41 = " & iStudentID & " OR studentID42 = " & iStudentID & " OR studentID43 = " & iStudentID & " OR studentID44 = " & iStudentID & " OR studentID45 = " & iStudentID & " OR studentID46 = " & iStudentID & " OR studentID47 = " & iStudentID & " OR studentID48 = " & iStudentID & " OR studentID49 = " & iStudentID & _
                          " OR studentID50 = " & iStudentID & " OR studentID51 = " & iStudentID & " OR studentID52 = " & iStudentID & " OR studentID53 = " & iStudentID & " OR studentID54 = " & iStudentID & " OR studentID55 = " & iStudentID & " OR studentID56 = " & iStudentID & " OR studentID57 = " & iStudentID & " OR studentID58 = " & iStudentID & " OR studentID59 = " & iStudentID & _
                          " OR studentID60 = " & iStudentID & " OR studentID61 = " & iStudentID & " OR studentID62 = " & iStudentID & " OR studentID63 = " & iStudentID & " OR studentID64 = " & iStudentID & " OR studentID65 = " & iStudentID & " OR studentID66 = " & iStudentID & " OR studentID67 = " & iStudentID & " OR studentID68 = " & iStudentID & " OR studentID69 = " & iStudentID & _
                          " OR studentID70 = " & iStudentID & " OR studentID71 = " & iStudentID & " OR studentID72 = " & iStudentID & " OR studentID73 = " & iStudentID & " OR studentID74 = " & iStudentID & " OR studentID75 = " & iStudentID
           
    'in this case we can simply use a SELECT INTO SQL query since there is only 1 student. Insert dates first, then insert/update with the name.
    sSQL = "INSERT INTO AttendanceInt (attendanceDate) " & _
           "SELECT attendanceDate " & _
           "FROM Attendance " & _
           "WHERE (attendanceDate BETWEEN #" & sDate1 & "# AND #" & sDate2 & "#) " & _
           "AND (" & anyStudentIdMatches & ");"
           
    'MsgBox sSQL
    DoCmd.RunSQL sSQL
    
    studentName = getStudentNameFromID(iStudentID)
    sSQL = "UPDATE AttendanceInt " & _
           "SET sn1 = '" & studentName & "' " & _
           "WHERE attendanceDate <> NULL;"
           
    DoCmd.RunSQL sSQL
End Function



Function getStudentNameFromID(id As Integer) As String
    sSQL = "SELECT studentName FROM Students WHERE studentID = " & id & ";"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    getStudentNameFromID = rs.Fields(0).Value
End Function

Function insertValuesIntoIntTable(rs As Recordset)
    'MsgBox ("now in Function insertValuesIntoIntTable. This is where the AttendanceInt table would be updated.")
    Dim iRecordCount As Integer
    Dim sAllColumns As String
    Dim sAllNames As String
    
    'we now need to replace all the ID's with names. To do this, we first need a hash table of ID's & names.
    Dim dicIDnames As Dictionary
    Set dicIDnames = getAllStudentIDsAndNames 'returns a dictionary
    
    
    sAllColumns = "AttendanceDate, sn1, sn2, sn3, sn4, sn5, sn6, sn7, sn8, sn9, sn10, sn11, sn12, sn13, sn14, sn15, sn16, sn17, sn18, sn19, " & _
                  "sn20, sn21, sn22, sn23, sn24, sn25, sn26, sn27, sn28, sn29, sn30, sn31, sn32, sn33, sn34, sn35, sn36, sn37, sn38, sn39, " & _
                  "sn40, sn41, sn42, sn43, sn44, sn45, sn46, sn47, sn48, sn49, sn50, sn51, sn52, sn53, sn54, sn55, sn56, sn57, sn58, sn59, " & _
                  "sn60, sn61, sn62, sn63, sn64, sn65, sn66, sn67, sn68, sn69, sn70, sn71, sn72, sn73, sn74, sn75"
    
    
    rs.MoveLast
    iRecordCount = rs.RecordCount
    rs.MoveFirst
    
    i = 0
    Do While (i < iRecordCount)
        sAllNames = "#" & rs.Fields(0).Value & "#, " 'get the date
        j = 1
        Do While (j <= 75)
            sAllNames = (sAllNames & "'" & (dicIDnames(rs.Fields(j).Value)) & "', ") 'change ID to name
            j = (j + 1)
        Loop
        sAllNames = Left(sAllNames, Len(sAllNames) - 2) 'get rid of space & comma at end
        sSQL = "INSERT INTO AttendanceInt (" & sAllColumns & ") VALUES (" & sAllNames & ");"
        DoCmd.RunSQL sSQL
        i = (i + 1)
        rs.MoveNext
    Loop
    
End Function


Function getAllStudentIDsAndNames() As Dictionary
    Dim dict As Dictionary
    Set dict = New Dictionary

    'Set getAllStudentIDsAndNames = New scripting.Dictionary
    sSQL = "SELECT studentID, studentName FROM Students"
    Set rsNames = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    
    rsNames.MoveLast
    iRecordCount = rsNames.RecordCount
    rsNames.MoveFirst
    
    i = 0
    Do While (i < iRecordCount)
        'MsgBox (rsNames.Fields(0) & " '" & rsNames.Fields(1) & "'")
        dict.Add rsNames.Fields(0).Value, rsNames.Fields(1).Value
        rsNames.MoveNext
        i = (i + 1)
    Loop
    
    Set getAllStudentIDsAndNames = dict
End Function

Function seeIfAttendanceRecordsExist(dtDate1 As Date, dtDate2 As Date, Optional ByVal iStudentID As Integer = 0) As Boolean 'sets the variable boolRecordsExist. If attendance records do exist matching the criteria given, the recordset rs will be loaded.
    If (iStudentID = "") Then
        'generate SQL query to check if attendance records exist between given dates (any student ID)
        sSQL = "SELECT a.[attendanceDate] FROM Attendance as a WHERE a.[attendanceDate] BETWEEN #" & dtDate1 & "# AND #" & dtDate2 & "#;"
    Else
        'generate SQL query to check if attendance records exist between given dates ONLY matching the given student ID
        sSQL = "SELECT a.[attendanceDate] FROM Attendance as a WHERE a.[attendanceDate] BETWEEN #" & dtDate1 & "# AND #" & dtDate2 & "# " & _
               "AND (a.studentID1 = " & iStudentID & " OR a.studentID2 = " & iStudentID & " OR a.studentID3 = " & iStudentID & " OR a.studentID4 = " & iStudentID & " " & _
               "OR a.studentID5 = " & iStudentID & " OR a.studentID6 = " & iStudentID & " OR a.studentID7 = " & iStudentID & " OR a.studentID8 = " & iStudentID & " OR a.studentID9 = " & iStudentID & " " & _
               "OR a.studentID10 = " & iStudentID & " OR a.studentID11 = " & iStudentID & " OR a.studentID12 = " & iStudentID & " OR a.studentID13 = " & iStudentID & "OR a.studentID14 = " & iStudentID & " OR a.studentID15 = " & iStudentID & " OR a.studentID16 = " & iStudentID & " OR a.studentID17 = " & iStudentID & " OR a.studentID18 = " & iStudentID & " OR a.studentID19 = " & iStudentID & " " & _
               "OR a.studentID20 = " & iStudentID & ");"
    End If
    
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If (rs.RecordCount > 0) Then
        seeIfAttendanceRecordsExist = True
    Else: seeIfAttendanceRecordsExist = False
    End If
    
End Function

Function loadDateRecordsIntoIntermediaryTable(rs As Recordset)
    iDateEntryRow = 0
    Do While (iDateEntryRow <= iNumberOfDateEntriesForMonth)
        Call generateQueryAndLoadArray 'takes the variable iDateEntryRow. gets date and ID's present on date, loads them into sArray, sets variable sDate
        Call insertRecordIntoIntermediaryTable 'takes the variables (sDate, sArray), inserts a new record into the table.
        iDateEntryRow = (iDateEntryRow + 1)
    Loop
End Function


Function generateQueryAndLoadArray() 'gets the names present on given date, loads them into sArray, sets variable sDate
    Call initialize_sArray 'loads sArray with empty string values. This is so that there will not be an issue with encountering null values later.
On Error Resume Next
    'Get first 25 student names
    sSQL = "SELECT a.[attendanceDate], s1.[studentName], s2.[studentName], s3.[studentName], s4.[studentName], s5.[studentName], s6.[studentName], s7.[studentName], s8.[studentName], s9.[studentName], " & _
            "s10.[studentName], s11.[studentName], s12.[studentName], s13.[studentName], s14.[studentName], s15.[studentName], s16.[studentName], s17.[studentName], s18.[studentName], s19.[studentName], " & _
            "s20.[studentName], s21.[studentName], s22.[studentName], s23.[studentName], s24.[studentName], s25.[studentName] " & _
            "FROM ((((((((((((((((((((((((Attendance AS a INNER JOIN Students AS s1 ON s1.[studentID] = a.[studentID1]) INNER JOIN Students AS s2 ON s2.[studentID] = a.[studentID2]) INNER JOIN Students AS s3 ON s3.[studentID] = a.[studentID3]) INNER JOIN Students AS s4 ON s4.[studentID] = a.[studentID4]) INNER JOIN Students AS s5 ON s5.[studentID] = a.[studentID5]) INNER JOIN Students AS s6 ON s6.[studentID] = a.[studentID6]) INNER JOIN Students AS s7 ON s7.[studentID] = a.[studentID7]) INNER JOIN Students AS s8 ON s8.[studentID] = a.[studentID8]) INNER JOIN Students AS s9 ON s9.[studentID] = a.[studentID9]) " & _
            "INNER JOIN Students AS s10 ON s10.[studentID] = a.[studentID10]) INNER JOIN Students AS s11 ON s11.[studentID] = a.[studentID11]) INNER JOIN Students AS s12 ON s12.[studentID] = a.[studentID12]) INNER JOIN Students AS s13 ON s13.[studentID] = a.[studentID13]) INNER JOIN Students AS s14 ON s14.[studentID] = a.[studentID14]) INNER JOIN Students AS s15 ON s15.[studentID] = a.[studentID15]) INNER JOIN Students AS s16 ON s16.[studentID] = a.[studentID16]) INNER JOIN Students AS s17 ON s17.[studentID] = a.[studentID17]) INNER JOIN Students AS s18 ON s18.[studentID] = a.[studentID18]) INNER JOIN Students AS s19 ON s19.[studentID] = a.[studentID19]) " & _
            "INNER JOIN Students AS s20 ON s20.[studentID] = a.[studentID20]) INNER JOIN Students AS s21 ON s21.[studentID] = a.[studentID21]) INNER JOIN Students AS s22 ON s22.[studentID] = a.[studentID22]) INNER JOIN Students AS s23 ON s23.[studentID] = a.[studentID23]) INNER JOIN Students AS s24 ON s24.[studentID] = a.[studentID24]) INNER JOIN Students AS s25 ON s25.[studentID] = a.[studentID25] " & _
            "WHERE a.[attendanceDate] BETWEEN #" & dtDate1 & "# AND #" & dtDate2 & "#;"
            
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If (rs.RecordCount > 0) Then
       If (iDateEntryRow = 0) Then
            rs.MoveFirst
        Else
            L = 1
            Do While (L < iDateEntryRow) 'move to the next row/active row
                rs.MoveNext
                L = (L + 1)
            Loop
        End If
        'the first column is the date.
        sDate = rs.Fields(0)
        'iterate through each column.
        i = 1
        j = 0
        Do While (i <= 75)
            'MsgBox (i)
            'MsgBox ("rs.Fields(" & i & ") = " & rs.Fields(i) & " .")
            If (rs.Fields(i) = "") Then
                'do nothing
            Else
                sArray(j) = rs.Fields(i)
                'MsgBox ("module 1... rs.Fields(" & i & ") = " & rs.Fields(i))
                j = (j + 1)
            End If
            i = (i + 1)
        Loop
    Else
        'do nothing. sArray stays empty.
    End If
    
    'GET ID'S/NAMES 26-49'''''''''''''''''''''''''''''''''''''''''''
        sSQL = "SELECT a.[attendanceDate], s26.[studentName], s27.[studentName], s28.[studentName], s29.[studentName], " & _
                "s30.[studentName], s31.[studentName], s32.[studentName], s33.[studentName], s34.[studentName], s35.[studentName], s36.[studentName], s37.[studentName], s38.[studentName], s39.[studentName], " & _
                "s40.[studentName], s41.[studentName], s42.[studentName], s43.[studentName], s44.[studentName], s45.[studentName], s46.[studentName], s47.[studentName], s48.[studentName], s49.[studentName] " & _
            "FROM (((((((((((((((((((((((Attendance AS a INNER JOIN Students AS s26 ON s26.[studentID] = a.[studentID26]) INNER JOIN Students AS s27 ON s27.[studentID] = a.[studentID27]) INNER JOIN Students AS s28 ON s28.[studentID] = a.[studentID28]) INNER JOIN Students AS s29 ON s29.[studentID] = a.[studentID29]) " & _
            "INNER JOIN Students AS s30 ON s30.[studentID] = a.[studentID30]) INNER JOIN Students AS s31 ON s31.[studentID] = a.[studentID31]) INNER JOIN Students AS s32 ON s32.[studentID] = a.[studentID32]) INNER JOIN Students AS s33 ON s33.[studentID] = a.[studentID33]) INNER JOIN Students AS s34 ON s34.[studentID] = a.[studentID34]) INNER JOIN Students AS s35 ON s35.[studentID] = a.[studentID35]) INNER JOIN Students AS s36 ON s36.[studentID] = a.[studentID36]) INNER JOIN Students AS s37 ON s37.[studentID] = a.[studentID37]) INNER JOIN Students AS s38 ON s38.[studentID] = a.[studentID38]) INNER JOIN Students AS s39 ON s39.[studentID] = a.[studentID39]) " & _
            "INNER JOIN Students AS s40 ON s40.[studentID] = a.[studentID40]) INNER JOIN Students AS s41 ON s41.[studentID] = a.[studentID41]) INNER JOIN Students AS s42 ON s42.[studentID] = a.[studentID42]) INNER JOIN Students AS s43 ON s43.[studentID] = a.[studentID43]) INNER JOIN Students AS s44 ON s44.[studentID] = a.[studentID44]) INNER JOIN Students AS s45 ON s45.[studentID] = a.[studentID45]) INNER JOIN Students AS s46 ON s46.[studentID] = a.[studentID46]) INNER JOIN Students AS s47 ON s47.[studentID] = a.[studentID47]) INNER JOIN Students AS s48 ON s48.[studentID] = a.[studentID48]) INNER JOIN Students AS s49 ON s49.[studentID] = a.[studentID49]) " & _
            "WHERE a.[attendanceDate] BETWEEN #" & dtDate1 & "# AND #" & dtDate2 & "#;"
            
    rs.Close
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If (rs.RecordCount > 0) Then
        rs.MoveFirst
        If (iDateEntryRow > 1) Then
            L = 1
            Do While (L < iDateEntryRow) 'move to the next row/active row
                rs.MoveNext
                L = (L + 1)
            Loop
        End If
        'the first column is the date.
        'sDate = rs.Fields(0)
        'iterate through each column.
        i = 1 'rs.fields(1) is the first name
        'we leave j where it was because we will continue adding to the sArray
        Do While (i <= 75)
            If (rs.Fields(i) = "") Then
                'do nothing
            Else
                sArray(j) = rs.Fields(i)
                'MsgBox ("module 2... rs.Fields(" & i & ") = " & rs.Fields(i))
                j = (j + 1)
            End If
            i = (i + 1)
        Loop
    Else
        'do nothing. sArray stays empty.
    End If
    
    
    'GET ID'S/NAMES 50-75'''''''''''''''''''''''''''''''''''''''''''
        sSQL = "SELECT a.[attendanceDate], s50.[studentName], s51.[studentName], s52.[studentName], s53.[studentName], s54.[studentName], s55.[studentName], s56.[studentName], s57.[studentName], s58.[studentName], s59.[studentName], " & _
                "s60.[studentName], s61.[studentName], s62.[studentName], s63.[studentName], s64.[studentName], s65.[studentName], s66.[studentName], s67.[studentName], s68.[studentName], s69.[studentName], " & _
                "s70.[studentName], s71.[studentName], s72.[studentName], s73.[studentName], s74.[studentName], s75.[studentName] " & _
            "FROM (((((((((((((((((((((((Attendance AS a INNER JOIN Students AS s50 ON s50.[studentID] = a.[studentID50]) INNER JOIN Students AS s51 ON s51.[studentID] = a.[studentID51]) INNER JOIN Students AS s52 ON s52.[studentID] = a.[studentID52]) INNER JOIN Students AS s53 ON s53.[studentID] = a.[studentID53]) INNER JOIN Students AS s54 ON s54.[studentID] = a.[studentID54]) INNER JOIN Students AS s55 ON s55.[studentID] = a.[studentID55]) INNER JOIN Students AS s56 ON s56.[studentID] = a.[studentID56]) INNER JOIN Students AS s57 ON s57.[studentID] = a.[studentID57]) INNER JOIN Students AS s58 ON s58.[studentID] = a.[studentID58]) INNER JOIN Students AS s59 ON s59.[studentID] = a.[studentID59]) " & _
            "INNER JOIN Students AS s60 ON s60.[studentID] = a.[studentID60]) INNER JOIN Students AS s61 ON s61.[studentID] = a.[studentID61]) INNER JOIN Students AS s62 ON s62.[studentID] = a.[studentID62]) INNER JOIN Students AS s63 ON s63.[studentID] = a.[studentID63]) INNER JOIN Students AS s64 ON s64.[studentID] = a.[studentID64]) INNER JOIN Students AS s65 ON s65.[studentID] = a.[studentID65]) INNER JOIN Students AS s66 ON s66.[studentID] = a.[studentID66]) INNER JOIN Students AS s67 ON s67.[studentID] = a.[studentID67]) INNER JOIN Students AS s68 ON s68.[studentID] = a.[studentID68]) INNER JOIN Students AS s69 ON s69.[studentID] = a.[studentID69]) " & _
            "INNER JOIN Students AS s70 ON s70.[studentID] = a.[studentID70]) INNER JOIN Students AS s71 ON s71.[studentID] = a.[studentID71]) INNER JOIN Students AS s72 ON s72.[studentID] = a.[studentID72]) INNER JOIN Students AS s73 ON s73.[studentID] = a.[studentID73]) INNER JOIN Students AS s74 ON s74.[studentID] = a.[studentID74]) INNER JOIN Students AS s75 ON s75.[studentID] = a.[studentID75] " & _
            "WHERE a.[attendanceDate] BETWEEN #" & dtDate1 & "# AND #" & dtDate2 & "#;"
            
    rs.Close
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If (rs.RecordCount > 0) Then
        rs.MoveFirst
        If (iDateEntryRow > 1) Then
            L = 1
            Do While (L < iDateEntryRow) 'move to the next row/active row
                rs.MoveNext
                L = (L + 1)
            Loop
        End If
        'the first column is the date.
        'sDate = rs.Fields(0)
        'iterate through each column.
        i = 1 'rs.fields(1) is the first name
        'we leave j where it was because we will continue adding to the sArray
        Do While (i <= 75)
            If (rs.Fields(i) = "") Then
                'do nothing
            Else
                sArray(j) = rs.Fields(i)
                'MsgBox ("module 3... rs.Fields(" & i & ") = " & rs.Fields(i))
                j = (j + 1)
            End If
            i = (i + 1)
        Loop
    Else
        'do nothing. sArray stays empty.
    End If
    
    'The array "sArray" is now loaded with a date and all the names present on that date.
End Function

Function initialize_sArray() 'loads sArray with empty string values. This is so that there will not be an issue with encountering null values later.
    For k = 0 To 74
        sArray(k) = ""
    Next
End Function

Function updateSubform()
    Me.SubformAttendanceForMonth.Requery
End Function



Function truncateIntermediaryTable()
    sSqlDelete = "DELETE FROM AttendanceInt"
    DoCmd.SetWarnings False
    DoCmd.RunSQL sSqlDelete
End Function
Function insertRecordIntoIntermediaryTable() 'takes the variables (sDate, sArray)
    'On Error Resume Next
    'MsgBox ("now in insertRecordIntoIntermediaryTable()")
    sSQL = "INSERT INTO AttendanceInt (attendanceDate, sn1, sn2, sn3, sn4, sn5, sn6, sn7, sn8, sn9, sn10, sn11, sn12, sn13, sn14, sn15, sn16, sn17, sn18, sn19, " & _
            "sn20, sn21, sn22, sn23, sn24, sn25, sn26, sn27, sn28, sn29, sn30, sn31, sn32, sn33, sn34, sn35, sn36, sn37, sn38, sn39, " & _
            "sn40, sn41, sn42, sn43, sn44, sn45, sn46, sn47, sn48, sn49, sn50, sn51, sn52, sn53, sn54, sn55, sn56, sn57, sn58, sn59, " & _
            "sn60, sn61, sn62, sn63, sn64, sn65, sn66, sn67, sn68, sn69, sn70, sn71, sn72, sn73, sn74, sn75) " & _
            "VALUES (#" & sDate & "#, '" & sArray(0) & "', '" & sArray(1) & "', '" & sArray(2) & "', '" & sArray(3) & "', '" & sArray(4) & "', '" & sArray(5) & "', '" & sArray(6) & "', '" & sArray(7) & "', '" & sArray(8) & "', '" & sArray(9) & "', " & _
            "'" & sArray(10) & "', '" & sArray(11) & "', '" & sArray(12) & "', '" & sArray(13) & "', '" & sArray(14) & "', '" & sArray(15) & "', '" & sArray(16) & "', '" & sArray(17) & "', '" & sArray(18) & "', '" & sArray(19) & "', " & _
            "'" & sArray(20) & "', '" & sArray(21) & "', '" & sArray(22) & "', '" & sArray(23) & "', '" & sArray(24) & "', '" & sArray(25) & "', '" & sArray(26) & "', '" & sArray(27) & "', '" & sArray(28) & "', '" & sArray(29) & "', " & _
            "'" & sArray(30) & "', '" & sArray(31) & "', '" & sArray(32) & "', '" & sArray(33) & "', '" & sArray(34) & "', '" & sArray(35) & "', '" & sArray(36) & "', '" & sArray(37) & "', '" & sArray(38) & "', '" & sArray(39) & "', " & _
            "'" & sArray(40) & "', '" & sArray(41) & "', '" & sArray(42) & "', '" & sArray(43) & "', '" & sArray(44) & "', '" & sArray(45) & "', '" & sArray(46) & "', '" & sArray(47) & "', '" & sArray(48) & "', '" & sArray(49) & "', " & _
            "'" & sArray(50) & "', '" & sArray(51) & "', '" & sArray(52) & "', '" & sArray(53) & "', '" & sArray(54) & "', '" & sArray(55) & "', '" & sArray(56) & "', '" & sArray(57) & "', '" & sArray(58) & "', '" & sArray(59) & "', " & _
            "'" & sArray(60) & "', '" & sArray(61) & "', '" & sArray(62) & "', '" & sArray(63) & "', '" & sArray(64) & "', '" & sArray(65) & "', '" & sArray(66) & "', '" & sArray(67) & "', '" & sArray(68) & "', '" & sArray(69) & "', " & _
            "'" & sArray(70) & "', '" & sArray(71) & "', '" & sArray(72) & "', '" & sArray(73) & "', '" & sArray(74) & "');"

    'sSQL = "INSERT INTO AttendanceInt (attendanceDate, sn1) VALUES (#02/07/2018#, 'Skyler');"
    'MsgBox ("sSQL = " & sSQL)
    
    DoCmd.RunSQL sSQL
End Function





Function getAndSetLastDayOfMonth() 'takes the variables (sMonth sYear) sets the variable sLastDayOfMonth
    If (sMonth = "January") Then
        sLastDayOfMonth = "31"
    ElseIf (sMonth = "February") Then
        'check for leap year
        If (sYear = "2004") Or (sYear = "2008") Or (sYear = "2012") Or (sYear = "2016") Or (sYear = "2020") Or (sYear = "2021") _
                            Or (sYear = "2024") Or (sYear = "2028") Or (sYear = "2032") Or (sYear = "2036") Or (sYear = "2040") _
                            Or (sYear = "2044") Or (sYear = "2048") Or (sYear = "2052") Or (sYear = "2056") Or (sYear = "2060") _
                            Or (sYear = "2064") Or (sYear = "2068") Or (sYear = "2072") Or (sYear = "2076") Or (sYear = "2080") _
                            Or (sYear = "2084") Or (sYear = "2088") Or (sYear = "2092") Or (sYear = "2096") Then
            sLastDayOfMonth = "29"
        Else: sLastDayOfMonth = "28"
        End If
    ElseIf (sMonth = "March") Then
        sLastDayOfMonth = "31"
    ElseIf (sMonth = "April") Then
        sLastDayOfMonth = "30"
    ElseIf (sMonth = "May") Then
        sLastDayOfMonth = "31"
    ElseIf (sMonth = "June") Then
        sLastDayOfMonth = "30"
    ElseIf (sMonth = "July") Then
        sLastDayOfMonth = "31"
    ElseIf (sMonth = "August") Then
        sLastDayOfMonth = "31"
    ElseIf (sMonth = "September") Then
        sLastDayOfMonth = "30"
    ElseIf (sMonth = "October") Then
        sLastDayOfMonth = "31"
    ElseIf (sMonth = "November") Then
        sLastDayOfMonth = "30"
    ElseIf (sMonth = "December") Then
        sLastDayOfMonth = "31"
    End If
End Function

Function getMonthNumberFromMonthName() 'takes the variable sMonth, sets the variable sMonthNumber
    If (sMonth = "All") Then
        sMonthNumber = "01"
    ElseIf (sMonth = "January") Then
        sMonthNumber = "01"
    ElseIf (sMonth = "February") Then
        sMonthNumber = "02"
    ElseIf (sMonth = "March") Then
        sMonthNumber = "03"
    ElseIf (sMonth = "April") Then
        sMonthNumber = "04"
    ElseIf (sMonth = "May") Then
        sMonthNumber = "05"
    ElseIf (sMonth = "June") Then
        sMonthNumber = "06"
    ElseIf (sMonth = "July") Then
        sMonthNumber = "07"
    ElseIf (sMonth = "August") Then
        sMonthNumber = "08"
    ElseIf (sMonth = "September") Then
        sMonthNumber = "09"
    ElseIf (sMonth = "October") Then
        sMonthNumber = "10"
    ElseIf (sMonth = "November") Then
        sMonthNumber = "11"
    ElseIf (sMonth = "December") Then
        sMonthNumber = "12"
    End If
End Function

Function getAndSetYear() 'sets the variables (sYear, boolAllGood)
    sYear = Me.comboSeeHistoryYear.Value
    If (IsNumeric(sYear)) Then
        If InStr(sYear, ".") Then 'check to see if it contains a decimal
            MsgBox ("Please enter a valid year (no decimals)")
            boolAllGood = False
            Me.comboSeeHistoryYear.SetFocus
        Else
                iYear = CInt(sYear)
                If ((iYear < 1) Or (iYear > 9999)) Then   'make sure integer is between 1 and 9999
                    MsgBox ("Please enter a valid year")
                    boolAllGood = False
                    Me.comboSeeHistoryYear.SetFocus
                Else
                    boolAllGood = True
                    'sYear is already set
                End If
        End If
    Else
        MsgBox ("please enter a valid year")
        boolAllGood = False
        Me.comboSeeHistoryYear.SetFocus
    End If

End Function

Function getMonthAndPutInMonthSearch() 'takes the variable dtToday (set in setTheDateToToday method), sets month and year search
    ' the variable dtToday is already set with today's date. Now we need to extract just the month (in "January" format) and just the year.
    Dim sFirstTwoChars As String
    dtToday = Format(Now, mmddyyyy)
    'sYear = CStr(dtToday)
    sMonth = CStr(dtToday)
    'MsgBox (sMonth)
    sFirstTwoChars = Left(sMonth, 2)
    If (sFirstTwoChars = "1/") Then
        sMonth = "January"
    ElseIf (sFirstTwoChars = "2/") Then
        sMonth = "February"
    ElseIf (sFirstTwoChars = "3/") Then
        sMonth = "March"
    ElseIf (sFirstTwoChars = "4/") Then
        sMonth = "April"
    ElseIf (sFirstTwoChars = "5/") Then
        sMonth = "May"
    ElseIf (sFirstTwoChars = "6/") Then
        sMonth = "June"
    ElseIf (sFirstTwoChars = "7/") Then
        sMonth = "July"
    ElseIf (sFirstTwoChars = "8/") Then
        sMonth = "August"
    ElseIf (sFirstTwoChars = "9/") Then
        sMonth = "September"
    ElseIf (sFirstTwoChars = "10") Then
        sMonth = "October"
    ElseIf (sFirstTwoChars = "11") Then
        sMonth = "November"
    ElseIf (sFirstTwoChars = "12") Then
        sMonth = "December"
    End If
    
    'sYear = Right(sYear, 4)
    Me.comboSeeHistoryMonth.Value = sMonth
    'Me.comboSeeHistoryYear.Value = sYear
    
End Function

Function updateListBoxToDisplayStudentsPresent()
'On Error Resume Next
    Me.lbStudentsPresentOnSelectedDate.RowSource = ""
    Call connectToDB
    sSQL = "SELECT a.[studentID1], a.[studentID2], a.[studentID3], a.[studentID4], a.[studentID5], a.[studentID6], a.[studentID7], a.[studentID8], a.[studentID9], a.[studentID10], " & _
                  "a.[studentID11], a.[studentID12], a.[studentID13], a.[studentID14], a.[studentID15], a.[studentID16], a.[studentID17], a.[studentID18], a.[studentID19], a.[studentID20], " & _
                  "a.[studentID21], a.[studentID22], a.[studentID23], a.[studentID24], a.[studentID25], a.[studentID26], a.[studentID27], a.[studentID28], a.[studentID29], a.[studentID30], " & _
                  "a.[studentID31], a.[studentID32], a.[studentID33], a.[studentID34], a.[studentID35], a.[studentID36], a.[studentID37], a.[studentID38], a.[studentID39], a.[studentID40], " & _
                  "a.[studentID41], a.[studentID42], a.[studentID43], a.[studentID44], a.[studentID45], a.[studentID46], a.[studentID47], a.[studentID48], a.[studentID49], a.[studentID50], " & _
                  "a.[studentID51], a.[studentID52], a.[studentID53], a.[studentID54], a.[studentID55], a.[studentID56], a.[studentID57], a.[studentID58], a.[studentID59], a.[studentID60], " & _
                  "a.[studentID61], a.[studentID62], a.[studentID63], a.[studentID64], a.[studentID65], a.[studentID66], a.[studentID67], a.[studentID68], a.[studentID69], a.[studentID70], " & _
                  "a.[studentID71], a.[studentID72], a.[studentID73], a.[studentID74], a.[studentID75] " & _
                  "FROM Attendance as a WHERE a.[attendanceDate] = #" & sDate & "#;"
    
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If (rs.RecordCount > 0) Then
        rs.MoveFirst
        i = 0
        Do While (i < 75) 'for all possible 75 ID's
            'MsgBox ("rs.fields(i) = " & rs.Fields(i))
            sStudentName = " "
            sSQL = "SELECT s.[studentName] FROM Students as s WHERE s.[studentID] = " & rs.Fields(i) & ";" 'if a student ID was found in the attendance table, get the name from students table.
            'MsgBox ("sSQL = " & sSQL)
            Set rs2 = dbs.OpenRecordset(sSQL, dbOpenDynaset) 'if a null value is encountered in the recordset, it will just resume next line of code.
            If (rs2.RecordCount > 0) Then 'if the SQL query found a name that matches the ID from rs, then add the name to the listbox.
                'MsgBox ("rs2.RecordCount is greater than 0")
                sStudentName = rs2.Fields(0) 'rs2.Fields(0) is the student name.
                If (i = 0) Then 'if it's the first name returned, make that name the first line in the list box and clear out anything else that was in there.
                    'MsgBox ("setting Me.lbStudentsPresentOnSelectedDate.RowSource = rs2.Fields(0)")
                    If (sStudentName = " ") Or (sStudentName = "") Then
                        'do nothing. we don't want to add " " to the list of students present.
                    Else
                        Me.lbStudentsPresentOnSelectedDate.RowSource = sStudentName
                    End If
                Else
                    If (sStudentName = " ") Or (sStudentName = "") Then
                        'do nothing. we don't want to add " " to the list of students present.
                    Else
                        Me.lbStudentsPresentOnSelectedDate.AddItem sStudentName 'if i is greater than 0, then start ADDING items to the listbox
                    End If
                End If
            End If
            i = (i + 1)
        Loop
    End If
End Function

Function seeIfAnyStudentsWerePresentOnThisDate() 'takes the variable sDate, sets the variable boolStudentsPresent. loads record set rs with student ID's
On Error Resume Next
    'MsgBox ("sDate = " & sDate)
    Dim iStudintID As Integer
      
    sSQL = "SELECT a.[studentID1], a.[studentID2], a.[studentID3], a.[studentID4], a.[studentID5], a.[studentID6], a.[studentID7], a.[studentID8], a.[studentID9], a.[studentID10], " & _
                  "a.[studentID11], a.[studentID12], a.[studentID13], a.[studentID14], a.[studentID15], a.[studentID16], a.[studentID17], a.[studentID18], a.[studentID19], a.[studentID20], " & _
                  "a.[studentID21], a.[studentID22], a.[studentID23], a.[studentID24], a.[studentID25], a.[studentID26], a.[studentID27], a.[studentID28], a.[studentID29], a.[studentID30], " & _
                  "a.[studentID31], a.[studentID32], a.[studentID33], a.[studentID34], a.[studentID35], a.[studentID36], a.[studentID37], a.[studentID38], a.[studentID39], a.[studentID40], " & _
                  "a.[studentID41], a.[studentID42], a.[studentID43], a.[studentID44], a.[studentID45], a.[studentID46], a.[studentID47], a.[studentID48], a.[studentID49], a.[studentID50], " & _
                  "a.[studentID51], a.[studentID52], a.[studentID53], a.[studentID54], a.[studentID55], a.[studentID56], a.[studentID57], a.[studentID58], a.[studentID59], a.[studentID60], " & _
                  "a.[studentID61], a.[studentID62], a.[studentID63], a.[studentID64], a.[studentID65], a.[studentID66], a.[studentID67], a.[studentID68], a.[studentID69], a.[studentID70], " & _
                  "a.[studentID71], a.[studentID72], a.[studentID73], a.[studentID74], a.[studentID75] " & _
                  "FROM Attendance as a WHERE a.[attendanceDate] = #" & sDate & "#;"
                  
    'sSQL = "SELECT a.[studentID1] FROM Attendance AS a WHERE a.[attendanceDate] = #" & sDate & "#;"

    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
        If rs.RecordCount > 0 Then 'this will eval to 0 if the date is not found
            'now we need to iterate through each column and see if a value other than 0 or 14 can be found.
            boolStudentsPresent = False
            i = 0
            iStudintID = 0
            Do While (i < 75) '(0-74)
                iStudintID = rs.Fields(i)
                If ((iStudintID <> 14) And (iStudintID <> 0)) Then 'if a student ID other than 14 or 0 is found for this date, then boolStudentsPresent is set to true. otherwise it remains false.
                    boolStudentsPresent = True
                    Exit Do
                End If
                i = (i + 1)
            Loop
            'MsgBox ("boolStudentsPresent = " & boolStudentsPresent)
        Else
            boolStudentsPresent = False
            'MsgBox ("boolStudentsPresent = " & boolStudentsPresent)
        End If
End Function

Function connectToDB()
    Set dbs = CurrentDb
End Function

Function seeIfDateExistsInTable()
    sSQL = "SELECT a.[attendanceDate] FROM Attendance as a WHERE a.[attendanceDate] = #" & sDate & "#;"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If (rs.RecordCount > 0) Then
        boolDateExists = True
    Else: boolDateExists = False
    End If
    'rs.Close
End Function

Function updateCombosToNotHaveStudentsAlreadyPresentOnThisDay() 'rs is loaded from previous method (seeIfAnyStudentsWerePresentOnThisDate), and contains all ID's of students present on this day. sets the variable sSQL
On Error GoTo errHandler
    sSQL = "SELECT s.[studentID], s.[studentName] FROM Students AS s WHERE s.[studentID] <> 0"
    rs.MoveFirst
    
    i = 0
    Do While (i < 75) 'for all possible 75 ID's
        sSQL = (sSQL & " AND s.[studentID] <> " & rs.Fields(i)) 'add not equal to this ID
        i = (i + 1)
    Loop
    sSQL = (sSQL & " ORDER BY studentName")
    
    Me.comboStudent1.RowSource = sSQL
errHandler:
    Me.comboStudent1.RowSource = sSQL
End Function

Function setTheDateToToday()
    dtToday = CDate(Format(Now, "mm/dd/yyyy"))
    Me.txtDate.Value = dtToday
End Function


Function getDateFromTxtDate() 'sets the variables sDate and boolValidDate
    sDate = Me.txtDate.Value
    'make sure that a date was entered
    If IsDate(sDate) Then
        boolValidDate = True
    Else
        boolValidDate = False
        MsgBox ("You must enter a valid date.")
    End If
End Function



Private Sub imgQ1_Click()
    Dim sTitle As String
    Dim sMainMessage As String
    
    sTitle = "ATTENDANCE HISTORY - DROP DOWN BOXES & TABLE"
    
    sMainMessage = "Use the 3 drop down boxes here to select attendance history you would like to view." & vbCrLf & _
                   "Filter by month, year, and student." & vbCrLf & _
                   "To view attendance for all months, select 'All Months'." & vbCrLf & _
                   "If you would like to view attendance for all students then do not select any students (leave blank)." & vbCrLf & _
                   vbCrLf & _
                   "The columns 'sn1, sn2, sn3' etc. are abbreviations for 'student name 1, student name 2, student name 3' and so forth."
    
    MsgBox sMainMessage, vbOKOnly, sTitle
End Sub




Private Sub txtDate_Change()
    'WE CANNOT HAVE AN ON CHANGE METHOD FOR THE DATE BOX, OR ELSE WHEN SOMEONE IS TYPING THEY WILL BE INTERRUPTED AND AUTO FILL WILL FINISH THE TEXT BEFORE THEY CAN FINISH TYPING.
    'you also cannot call the after update method, or else it will auto-fill in the typing and interrupt the user.
    'we also cannot do form.Refresh, because that will mess up the typing in the same way.
    'therefore, you must do on lost focus.
    'On Error Resume Next
    'Me.Refresh
    'Call txtDate_AfterUpdate
End Sub


Private Function setListBoxToNoResults()
    Me.lbStudentsPresentOnSelectedDate.RowSource = "There were no students present on this date"
End Function


Private Sub txtDate_LostFocus()
    Call getDateFromTxtDate 'sets the variables sDate and boolValidDate
    Call connectToDB
    Call seeIfDateExistsInTable 'takes the variable sDate. sets the variable boolDateExists
    If (boolDateExists = True) Then
        Call seeIfAnyStudentsWerePresentOnThisDate 'takes the variable sDate, sets the variable boolStudentsPresent. loads rs with all the IDs for this date
        
        If (boolStudentsPresent = True) Then
            'MsgBox ("students were present on this day. ")
            Call updateListBoxToDisplayStudentsPresent 'takes rs (loaded from seeIfAnyStudentsWerePresentOnThisDate function), displays non-null values in listbox.
            Call updateCombosToNotHaveStudentsAlreadyPresentOnThisDay 'rs is loaded from previous method, and contains all ID's of students present on this day.
                                                                        'sets the variable sSQL
        Else
            Call setListBoxToNoResults
            Me.comboStudent1.RowSource = "SELECT s.[studentID], s.[studentName] FROM Students AS s ORDER BY s.[studentName] ASC;"
        End If
        
    Else
        Call setListBoxToNoResults
        Me.comboStudent1.RowSource = "SELECT s.[studentID], s.[studentName] FROM Students AS s ORDER BY s.[studentName] ASC;"
    End If
    
    Me.lblDateToRemove.Caption = Me.txtDate.Value
    Call updateComboStudentsPresent 'takes the variables boolDateExists (set by function "seeIfDateExistsInTable") and the rs (loaded by "seeIfAnyStudentsWerePresentOnThisDate" function, if applicable)
                                    'also sets remove button to enabled or not enabled.
End Sub

Function updateComboStudentsPresent() 'takes the variables boolDateExists (set by function "seeIfDateExistsInTable") and the rs (loaded by "seeIfAnyStudentsWerePresentOnThisDate" function, if applicable)
'On Error Resume Next
    If (boolDateExists = True) Then
        If (boolStudentsPresent = True) Then
            rs.MoveLast: iRecordCount = rs.RecordCount
            rs.MoveFirst
            If (iRecordCount > 0) Then
                Call getSqlIdsAndNamesFromIds 'takes the variable rs, which is loaded with ID's. returns sSQL variable/query to get both ID's and names.
                Me.comboStudentsPresent.RowSource = sSQL 'this combo rowsource is now set to only students present on selected date
                Me.btnRemove.Enabled = True 'button is only enables if students where present.
            Else
                Me.comboStudentsPresent.RowSource = ""
                Me.comboStudentsPresent.Value = ""
                Me.btnRemove.Enabled = False
            End If
        Else
            Me.comboStudentsPresent.RowSource = ""
            Me.comboStudentsPresent.Value = ""
            Me.btnRemove.Enabled = False
        End If
    Else
        Me.comboStudentsPresent.RowSource = ""
        Me.comboStudentsPresent.Value = ""
        Me.btnRemove.Enabled = False
    End If
End Function

Function getSqlIdsAndNamesFromIds() 'takes the variable rs, which is loaded with ID's. returns sSQL variable/query to get both ID's and names.
'This function will only be called if there is at least 1 id in the rs, so we don't have to worry about checking for that here.
'On Error Resume Next
    sSQL = "SELECT s.[studentID], s.[studentName] FROM Students AS s WHERE s.[studentID] = " & rs.Fields(0)
    i = 1
    Do While (i < 75) 'for all possible 75 ID's. Note: we always have to iterate through all of these because there are no null fields, only 14 (dummy student). Date records where a student was removed may look like this: 19 13 14 20
        sSQL = (sSQL & " OR s.[studentID] = " & rs.Fields(i)) 'semicolon is not added on this line. if null value in column is encountered, this line will fail.
        i = (i + 1)
    Loop
    sSQL = (sSQL & " ORDER BY studentName;")
    
End Function
