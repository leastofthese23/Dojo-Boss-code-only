Option Compare Database
    
Dim sName As String
Dim sPhoneNumber As String
Dim sEmail As String
Dim sComments As String
Dim sSQL As String
Dim sStudentName As String
Dim sRankTimeReq As String
Dim sMonthsToNextRank As String
Dim sDateToday As String
Dim sDateDiffInMonths As String
Dim sPromoDate As String
Dim sYearsInRank As String
Dim sTimeToNextPromo As String
Dim sMonthsInRank As String
Dim sStudentName1 As String
Dim sStudentRank As String
Dim sYears As String
Dim sRelativeFilePath As String
Dim sFullFilePath As String
Dim sSpaceSeperatedFilePath As String
Dim sPaymentStatus As String
Dim sRank As String
Dim sNewRank As String
Dim sParentName As String
Dim condition As String
Dim sMobileCarrier As String
Dim sDOB As String
Dim sAddress As String
Dim sCity As String
Dim sState As String
Dim sZip As String
Dim sSmsEmail As String
Dim sOutsideTraining As String
Dim sMedical As String

Dim bytYearsInRank As Byte
Dim bytWeeksInRank As Byte
Dim bytTimeRequirement As Byte
Dim bytMonthsToNextPromo As Byte

Dim sglMonthlyRate As Single
Dim sglDateDiffInDays As Single
Dim sglYears As Single
Dim sglDateDiffInMonths As Single
Dim sglPercentageOfReqFulfilled As Single
    
Dim iRecordCount1 As Integer
Dim iRecordCount2 As Integer
Dim iStudentProgress As Integer
Dim iDateDiffInMonths As Integer
Dim iDateDiffInYears As Integer
Dim iYearsInRank As Integer
Dim iMonths As Integer
Dim iYears As Integer
Dim iMonthsInRank As Integer
Dim iRankMonthReq As Integer
Dim iMonthsCompleted As Integer
Dim iMonthsRemaining As Integer
Dim iInnerWidth As Integer
Dim iStudentID As Integer
Dim iAge As Integer

Dim boolValidDOB As Boolean
Dim boolAllGood As Boolean

Dim lColor As Long

Dim dtOfPromo As Date
Dim dtToday As Date
Dim dtDOB As Date

Dim dbs As Database
Dim rs As Recordset
Dim rs2 As Recordset


Private Sub btn1half_Click()
    iStudentProgress = 2000
    Me.lbl1.Width = iStudentProgress
End Sub

Private Sub btn1quarter_Click()
    iStudentProgress = 1000
    Me.lbl1.Width = iStudentProgress
End Sub

Function convertYearsAndMonthsToYears()
    iMonths = (iMonths + (years * 12))
End Function

Private Sub btnAttendance_Click()
    DoCmd.OpenForm FormName:="AttendanceTracking"
End Sub



Function setTheProgressBar() 'takes the variable iMonths, sets the variable iInnerWidth
    iMonthsRequirement = iMonths
    'MsgBox ("iMonthsInRank = " & iMonthsInRank & vbCrLf & "iRankMonthReq = " & iRankMonthReq)
    If (iMonthsRequirement = 0) Then 'avoid dividing by 0
        sglPercentageOfReqFulfilled = 0
    Else
        sglPercentageOfReqFulfilled = 100 * (iMonthsInRank / iMonthsRequirement)
    End If
    
    'MsgBox ("sglPercentageOfReqFulfilled = " & sglPercentageOfReqFulfilled)
    'round it down to whole number
    sPercentComplete = CStr(sglPercentageOfReqFulfilled)
    'MsgBox ("sPercentComplete before loop = " & sPercentComplete)
    While (InStr(sPercentComplete, "."))
        sPercentComplete = Left(sPercentComplete, Len(sPercentComplete) - 1)
    Wend
    'MsgBox ("sPercentComplete after loop = " & sPercentComplete)
    iPercentComplete = CInt(sPercentComplete)
    'MsgBox ("iPercentComplete = " & iPercentComplete)
    'the progress bar is up to 3200 long, so 1/100 increment is 32.
    iInnerWidth = (iPercentComplete * 32)
    'MsgBox ("iInnerWidth = " & iInnerWidth)
    
    Call setInnerProgressBarWidth 'takes the variable iInnerWidth, sets width in progress bar
    Call getStudentColor 'takes the variable sStudentRank, sets the variable lColor
    Call fillProgressBarWithColor 'takes variables (bytFormRowNumber, lColor), sets correspding inner label to corresponding student color
    'if (sPercentComplete )
End Function

Function fillProgressBarWithColor() 'takes variables (bytFormRowNumber, lColor), sets correspding inner label to corresponding student color
    Me.lblInnerProgressBar.BackColor = lColor
End Function

Function getStudentColor() 'takes the variable sStudentRank, sets the variable lColor
    'sStudentRank
    If (InStr(sStudentRank, "white")) Then
        lColor = 16186620
    ElseIf (InStr(sStudentRank, "blue")) Then
        lColor = 12349952
    ElseIf (InStr(sStudentRank, "green")) Then
        lColor = 5553172
    ElseIf (InStr(sStudentRank, "brown")) Then
        lColor = 3234443
    ElseIf (InStr(sStudentRank, "black")) Then
        lColor = 2500134
    End If
End Function

Function setInnerProgressBarWidth()
    Me.lblInnerProgressBar.Width = iInnerWidth
End Function

Function getTimeSpentInRank() 'takes the variable sStudentName, sets the variable iMonthsInRank
    On Error Resume Next
    'Set dbs = CurrentDb
    sSQL = "SELECT s.[monthsInRank] FROM Students as s WHERE s.[studentName] = '" & sStudentName & "';"
    'MsgBox ("sSQL = " & sSQL)
    
    Set rs2 = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs2.RecordCount > 0 Then
        'MsgBox ("I found your months in rank. ")
        rs2.MoveFirst
        'MsgBox ("rs2.Fields(0) = " & rs2.Fields(0))
        iMonthsInRank = rs2.Fields(0) 'this will be used later in the setProgressBar Function
        'MsgBox ("sMonthsInRank = " & sMonthsInRank)
        sMonthsInRank = (sMonthsInRank & " months")
    Else
        sStudentRank = "error; not found"
    End If
End Function

Function putTimeRequirementForCurrentRankInTextBox() 'takes the vaiable iMonths, displays iMonths + " months" in the rank time requirement text box
    sMonthsInRank = (iMonths & " months")
    Me.txtRankTimeReq.Value = sMonthsInRank
End Function

Function getStudentCurrentRank()
    On Error Resume Next
    'get the student name
    'look up the name in the table: find the corresponding rank that student is currently in
    Set dbs = CurrentDb
    sSQL = "SELECT s.[currentRank] FROM Students as s WHERE s.[studentName] = '" & sStudentName & "';"
    
    'MsgBox ("sSQL = " & sSQL)
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        rs.MoveFirst
        sStudentRank = rs.Fields(0)
    Else
        sStudentRank = "rank not found"
    End If
    rs.Close
End Function

Function getMonthsToNextPromo() 'takes variables (iMonthsInRank, iMonths), sets the variable bytMonthsToNextPromo
    On Error Resume Next
    'get time in rank
    'already in the variable iMonthsInRank (from previously called Function)
    
    'get rank req
    'already set in variable iMonths (from previously called Function)
    'rank req - time in rank = months to next promo
    
    bytMonthsToNextPromo = (iMonths - iMonthsInRank)
End Function

Function getTimeRequirementForCurrentRank() 'takes the variable sStudentRank, sets the variable iMonths
    'On Error Resume Next
    Set dbs = CurrentDb
    sSQL = "SELECT r.[monthReq] FROM Ranks as r WHERE r.[rank] = '" & sStudentRank & "';"
    'MsgBox ("sSQL = " & sSQL)
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        'MsgBox ("record count is greater than 0")
        rs.MoveFirst
        iMonths = rs.Fields(0) 'this will be used later in other Functions
        sMonths = (rs.Fields(0) & " months")
        'MsgBox ("month require for this rank accordning to getTimeRequirementForCurrentRank() = " & iMonths)
    Else
        'MsgBox ("record count is 0")
        sMonths = ""
        iMonths = 0
    End If
    rs.Close
End Function

Private Sub btnBack_Click()
    DoCmd.OpenForm FormName:="Students"
End Sub

Private Sub btnCalendar_Click()
    FollowHyperlink "http://ekkc-nw.com/class-calendar/"
End Sub

Private Sub btnFinancials_Click()
    DoCmd.OpenForm FormName:="Financials"
End Sub

Private Sub btnForms_Click()
    DoCmd.OpenForm FormName:="DojoForms"
End Sub

Private Sub btnGear_Click()
    DoCmd.OpenForm FormName:="Settings"
End Sub

Private Sub btnHome_Click()
    DoCmd.OpenForm FormName:="Home"
End Sub

Private Sub btnMessaging_Click()
    DoCmd.OpenForm FormName:="Messaging"
End Sub

Private Sub btnRefresh_Click()
    'On Error Resume Next
    'MsgBox ("now in btnRefresh_Click")
    'Me.Refresh
    'sStudentName = Me.comboSelectedStudent.Column(1)
    Call comboSelectedStudent_Click
End Sub

Public Sub btnRefresh_GotFocus()
    'MsgBox ("now in btnRefresh_GotFocus")
    Call btnRefresh_Click
End Sub

Function getParentFromTxtBox() As String
On Error Resume Next 'in case null value is encountered
    getParentFromTxtBox = "" 'in case text box is blank, will return empty string.
    getParentFromTxtBox = Me.txtParentName.Value
End Function

Function getMedicalFromTxtBox() As String
On Error Resume Next 'in case null value is encountered
    getMedicalFromTxtBox = "" 'in case text box is blank, will return empty string.
    getMedicalFromTxtBox = Me.txtMedicalIssues.Value
End Function

Function getCityFromTxtBox() As String
On Error Resume Next 'in case null value is encountered
    getCityFromTxtBox = "" 'in case text box is blank, will return empty string.
    getCityFromTxtBox = Me.comboCity.Value
End Function

Function getCommentsFromTxt() As String
On Error Resume Next 'in case null value is encountered
    getCommentsFromTxt = "" 'in case text box is blank, will return empty string.
    getCommentsFromTxt = Me.txtComments.Value
End Function

Function getPaymentStatusFromTxt() As String
On Error Resume Next 'in case null value is encountered
    getPaymentStatusFromTxt = "" 'in case text box is blank, will return empty string.
    getPaymentStatusFromTxt = Me.txtPaymentStatus.Value
End Function

Function getNameFromTextBox() As String
On Error Resume Next 'in case null value is encountered
    sName = "" 'in case text box is blank, will return empty string.
    sName = Me.txtName.Value
    If (sName = "") Or IsNull(sName) Then
        boolAllGood = False
        Dim sTitle As String
        Dim sMainMessage As String
        sTitle = "Error"
        sMainMessage = "You must enter a value for student name."
        MsgBox sMainMessage, vbOKOnly, sTitle
    End If
    getNameFromTextBox = sName
End Function

Function getPhoneNumberFromTextBox() As String
On Error Resume Next 'in case null value is encountered
    getPhoneNumberFromTextBox = "" 'in case text box is blank, will return empty string.
    getPhoneNumberFromTextBox = Me.txtPhoneNumber.Value
End Function
Function getOutsideTrainingFromTextBox() As String
On Error Resume Next 'in case null value is encountered
    getOutsideTrainingFromTextBox = "" 'in case text box is blank, will return empty string.
    getOutsideTrainingFromTextBox = Me.txtOutsideTraining.Value
End Function
Function getEmailFromTextBox() As String
On Error Resume Next 'in case null value is encountered
    getEmailFromTextBox = "" 'in case text box is blank, will return empty string.
    getEmailFromTextBox = Me.txtEmail.Value
End Function

Function getZipFromTextBox() As String
On Error Resume Next 'in case null value is encountered
    getZipFromTextBox = "" 'in case text box is blank, will return empty string.
    getZipFromTextBox = Me.txtZip.Value
End Function
Function getAddressFromTextBox() As String
On Error Resume Next 'in case null value is encountered
     getAddressFromTextBox = "" 'in case text box is blank, will return empty string.
     getAddressFromTextBox = Me.txtAddress.Value
End Function


Function setSmsEmail() 'gets values from form elements containing phone number and mobile carrier sms, sets the variable sSmsEmail
    sPhoneNumber = Me.txtPhoneNumber.Value

    'remove any special characters from phone number
    If InStr(sPhoneNumber, " ") Then 'remove space
        sPhoneNumber = Replace(sPhoneNumber, " ", "")
    End If
    If InStr(sPhoneNumber, "(") Then 'remove "("
        sPhoneNumber = Replace(sPhoneNumber, "(", "")
    End If
    If InStr(sPhoneNumber, ")") Then 'remove ")"
        sPhoneNumber = Replace(sPhoneNumber, ")", "")
    End If
    If InStr(sPhoneNumber, "-") Then 'remove "-"
        sPhoneNumber = Replace(sPhoneNumber, "-", "")
    End If
    
    'see if the phone number already has a 1 at the beginning. if so, do nothing; otherwise, add 1 at the beginning.
    Dim sFirstChar As String
    sFirstChar = Left(sPhoneNumber, 1)
    If (sFirstChar = "1") Then
        'do nothing
    Else
        sPhoneNumber = ("1" & sPhoneNumber)
    End If
    
    sSmsCarrier = Me.comboMobileCarrier.Value
    Call connectToDB
    
    sSQL = "SELECT m.[smsGateway] FROM MobileCarriers AS m WHERE m.[carrier] = '" & sSmsCarrier & "';"
    'MsgBox (sSQL)
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        sSmsCarrier = rs.Fields(0)
        'MsgBox ("rs is greater than 0. sSmsCarrier = " & sSmsCarrier)
    Else
        sSmsCarrier = ""
        'MsgBox ("rs is 0. sSmsCarrier = " & sSmsCarrier)
    End If
    
    sSmsEmail = (sPhoneNumber & sSmsCarrier)
End Function

Function getStudentIdMatchingName() 'takes the variable sStudentName, sets the variable iStudentID
    Call connectToDB
    sSQL = "SELECT s.[studentID] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
        
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If (rs.RecordCount > 0) Then
        rs.MoveFirst
        iStudentID = rs.Fields(0)
    Else
        
    End If
End Function

Function connectToDB()
    Set dbs = CurrentDb
End Function

Function getMonthsInRankFromCombo() 'takes variables iYears iMonths, sets iMonths
    sMonths = Me.comboMonthsInRank.Value
    If (IsNumeric(sMonths)) Then
        If InStr(sMonths, ".") Then 'check to see if it contains a decimal
            MsgBox ("you must enter an integer value between 0 and 600 for Months in rank (no decimals)")
        Else
            'is numeric and no decimals. test to see if in between 0 and 600
            iMonths = CInt(sMonths)
            If (iMonths < 0 Or iMonths > 600) Then
                MsgBox ("you must enter an integer value 0-600 for Months in rank")
            Else: 'do nothing, iMonths is set.
            End If
        End If
    Else: MsgBox ("you must enter an integer value 0-600 for Months in rank")
    End If
End Function

Function convertYearsAndMonthsToMonths()
    iMonths = (iMonths + (iYears * 12))
End Function

Function refreshForm()
    On Error Resume Next
    Me.Refresh
    Me.comboSelectedStudent.Requery
    Call comboSelectedStudent_Click
End Function

Function getYearsInRankFromCombo() 'sets iYears
    sYears = Me.comboYearsInRank.Value
    If (IsNumeric(sYears)) Then
        If InStr(sYears, ".") Then 'check to see if it contains a decimal
            MsgBox ("you must enter an integer value between 0 and 99 for years in rank (no decimals)")
        Else
            'is numeric and no decimals. test to see if in between 0 and 99
            iYears = CInt(sYears)
            If (iYears < 0 Or iYears > 99) Then
                MsgBox ("you must enter an integer value 0-99 for years in rank")
            Else: 'do nothing, iYears is set.
            End If
        End If
    Else: MsgBox ("you must enter an integer value 0-99 for years in rank")
    End If
End Function

Function getPromoDateFromTxt() As Date 'gets the date from the text box txtDateOfLastPromotion
    If Not (IsDate(Me.txtDateOfLastPromotion.Value)) Then
        MsgBox ("'" & Me.txtDateOfLastPromotion.Value & "' is not a valid date. " & vbCrLf & _
                "If the student does not have any promotion date, enter the date when he/she began training as a white belt.") 'if no valid previous promotion date was entered, send error msg to the user.
    Else
        getPromoDateFromTxt = CDate(Me.txtDateOfLastPromotion.Value) 'get the date from the text box and cast it to a date variable
    End If
End Function

Private Sub btnSaveChanges_Click()
'On Error GoTo ErHandla
    Dim sActiveStatus As String
    
    boolAllGood = True 'remains true until an error is encountered.
    iStudentID = getStudentIdFromCombo
        
    sName = getNameFromTextBox 'also sets the variable boolAllGood. includes error messaging.
    If (boolAllGood = True) Then
        sPhoneNumber = getPhoneNumberFromTextBox
        If (sPhoneNumber <> "") Then
            sMobileCarrier = Me.comboMobileCarrier.Value
            Call setSmsEmail 'gets values from form elements containing phone number and mobile carrier sms, sets the variable sSmsEmail
        Else
            sMobileCarrier = ""
        End If
        sEmail = getEmailFromTextBox
        sStudentRank = Me.comboStudentRank.Value 'limited to set
        dtOfPromo = getPromoDateFromTxt 'also sets the variable boolAllGood. includes error messaging.
        If (boolAllGood = True) Then
            Call getYearsInRankFromCombo 'sets iYears.
            Call getMonthsInRankFromCombo 'sets iMonths.
            Call convertYearsAndMonthsToMonths 'takes variables iYears iMonths, sets the variable iMonths
            sglMonthlyRate = Me.txtRate.Value 'this text box has an input mask, so no worries about bad input.
            sPaymentStatus = getPaymentStatusFromTxt
            sComments = getCommentsFromTxt
            sGender = Me.comboGender.Value 'limited to set
            sAddress = getAddressFromTextBox
            sCity = getCityFromTxtBox
            sState = Me.comboState.Value 'limited to set
            sZip = getZipFromTextBox
            sDOB = Me.txtDOB.Value 'this text box has an input mask, so no worries about bad input.
            sOutsideTraining = getOutsideTrainingFromTextBox
            sMedicalIssues = getMedicalFromTxtBox
            sParentName = getParentFromTxtBox
            sActiveStatus = Me.comboActive.Value 'limited to set
            'create SQL statement
            'Update table_name SET column1 = value1, column2 = value2, ...WHERE condition;
        
            sSQL = "UPDATE Students SET [studentName] = '" & sName & "', [phoneNumber] = '" & sPhoneNumber & "', [email] = '" & sEmail & "', [currentRank] = '" & sStudentRank & "', " & _
                   "[promotionDate] = #" & dtOfPromo & "#, [monthsInRank] = " & iMonths & ", [monthlyRate] = " & sglMonthlyRate & ", [paymentStatus] = '" & sPaymentStatus & "', " & _
                   "[comments] = '" & sComments & "', [gender] = '" & sGender & "', [address] = '" & sAddress & "', [city] = '" & sCity & "', [state] = '" & sState & "', " & _
                   "[zipCode] = '" & sZip & "', [DOB] = #" & sDOB & "#, [outsideTraining] = '" & sOutsideTraining & "', [medicalIssues] = '" & sMedicalIssues & "', [parentName] = '" & sParentName & "', " & _
                   "[smsEmail] = '" & sSmsEmail & "', [mobileCarrier] = '" & sMobileCarrier & "', [active] = '" & sActiveStatus & "' WHERE Students.[studentID] = " & iStudentID & ""
            
            'MsgBox ("sSQL = '" & sSQL & "'")
            DoCmd.RunSQL sSQL
            'display message confirming that the new record was added, including the students name.
        
            If (sActiveStatus = "false") Then 'need to set record source in combo box to include inactive students.
                sSQL = "SELECT s.[studentID], s.[studentName] FROM Students AS s ORDER BY studentName;"
                Me.comboSelectedStudent.RowSource = sSQL
            End If
            Me.comboSelectedStudent.Requery
            Me.Refresh
            Me.comboSelectedStudent.SetFocus: Me.comboSelectedStudent.SelText = sName
            Call comboSelectedStudent_Click
            Forms!Students!btnRefresh.SetFocus 'refresh the students form
            Me.btnSaveChanges.SetFocus 'then bring the focus back to where the user last clicked
            MsgBox (sName & "'s info successfully updated. ")
        End If
    End If

Exit Sub
ErHandla:
    MsgBox ("There was an issue updating the student info. Student info was NOT updated. If you do not understand why this error is occurring please take a screenshot and report it to a Dojo Boss administrator." & vbCrLf & "Error description: " & Err.Description)

End Sub

Function getStudentIdFromCombo() As Integer
On Error Resume Next
    i = 0
    i = Me.comboSelectedStudent.Column(0) 'this works when a student is selected manually.
    If (i = 0) Or IsNull(i) Then  'this must be done if the student name was entered from the calling page.
        sStudentName = Me.comboSelectedStudent.Value
        Call getStudentIdMatchingName 'takes the variable sStudentName, sets the variable i
    End If
    getStudentIdFromCombo = i
End Function

Private Sub btnStudents_Click()
    DoCmd.OpenForm FormName:="Students"
End Sub

Private Sub btnTimeInRank_Click()
    DoCmd.OpenForm FormName:="RankReq"
End Sub

Private Sub checkViewInactive_Click()
    Dim boolViewInactive As Boolean

    boolViewInactive = Me.checkViewInactive.Value
    'MsgBox ("boolViewInactive = " & boolViewInactive)
    If (boolViewInactive = True) Then
        sSQL = "SELECT s.[studentID], s.[studentName] FROM Students AS s ORDER BY studentName;"
    Else
        sSQL = "SELECT s.[studentID], s.[studentName] FROM Students AS s WHERE active = 'true' ORDER BY studentName; "
    End If
    
    Me.comboSelectedStudent.RowSource = sSQL
End Sub

Private Sub comboSelectedStudent_Click()
On Error Resume Next
    sStudentName = Me.comboSelectedStudent.Column(1) 'this works when a value is manually selected from the combo box.
    If (sStudentName = "") Or IsNull(sStudentName) Then 'this is needed for when the student name value was inserted from the calling form, rather than selected manually by the user.
        sStudentName = Me.comboSelectedStudent.Value
        If (sStudentName = "") Or IsNull(sStudentName) Then
            sStudentName = Me.lblStudentName.Caption 'sometimes previous methods do not work.
        End If
    End If

    Me.lblStudentName.Caption = sStudentName
    Call setStudentPicture 'takes the variable sStudentName, sets the image on this form
    Me.txtName.Value = sStudentName
    Call getStudentCurrentRank 'takes the variable sStudentName, sets the variable sStudentRank
    Call displayStudentCurrentRank 'takes the variable sStudentRank and displays it in the rank combo box
    Call getTimeRequirementForCurrentRank 'sets the variable iMonths
    Call putTimeRequirementForCurrentRankInTextBox 'takes the vaiable iMonths, displays iMonths + " months" in the rank time requirement text box
    Call getTimeSpentInRank 'takes the variable sStudentName, sets the variable iMonthsInRank
    Call displayTimeSpentInRank
    Call getMonthsToNextPromo 'takes variables (iMonthsInRank, iMonths), sets the variable bytMonthsToNextPromo
    Call displayMonthsToNextPromo 'takes the variable bytMonthsToNextPromo, displays it + " month" in the text box txtNearestPossiblePromo
    Call setTheProgressBar
    Call getPaymentStatus 'takes the variable sStudentName, sets the variable sPaymentStatus
    Call displayPaymentStatus 'takes the variables sPaymentStatus, displays the payment status in the text box
    Call getRate 'takes the variable sStudentName, sets the variable sglMonthlyRate
    Call getParentName 'takes the variable sStudentName, sets the variable sParentName
    Call displayParentName 'takes the variable sParentName, displays it in the parent name text box
    Call getMobileCarrier 'takes the variable sStudentName, sets the variable sMobileCarrier
    Call displayMobileCarrier 'takes the variable sMobileCarrier, displays it in the combo box
    sDOB = getDOBfromDB(sStudentName) 'Queries the database for DOB corresponding to student name. returns a date in String format.
'MsgBox ("sDOB = '" & sDOB & "'")
'MsgBox ("Point 1: dtDOB = '" & dtDOB & "'")
    iAge = getAgeFromDOB(sDOB) 'get age from date of birth.
'MsgBox ("iAge = " & iAge)
    Call displayDOBandAge 'takes the variables (sDOB, iAge), displays them in the text boxes
    Call getCompleteAddress 'takes the variable sStudentName, sets the variables (sAddress, sCity, sState, sZip)
    Call displayCompleteAddress 'takes the variables (sAddress, sCity, sState, sZip), displays them in corresponding form elements
    Call getOutsideTrainingAndMedicalIssues 'takes the variable sStudentName, sets the variables (sOutsideTraining, sMedical)
    Call displayOutsideTrainingAndMedicalIssues 'takes the variables (sOutsideTraining, sMedical), displays them in the corresponding text boxes.
    
    Call displayMonthlyRate 'takes the variables (sglMonthlyRate, bytFormRowNumber), displays the monthly rate in the corresponding text box.
    Call getPhoneAndEmail 'takes the variable sStudentName, sets the variables sPhoneNumber, sEmail
    Call displayPhoneAndEmail 'takes the variables (sPhoneNumber, sEmail), displays them in txtPhoneNumber, txtEmail
    Call getPromoDate 'takes the variable sStudentName, sets the variable sPromoDate
    Call displayPromoDate
    Call displayTimeInRankComboBox
    Call getAndDisplayComments 'takes the variable sStudentName, displays comments
    Call getAndDisplayActive 'takes the variable sStudentName, displays the student's active status as "true" or "false"
    Call showRankReq 'gets the variable sRank from the text box, displays rank req in subform
End Sub

Function getAndDisplayActive() 'takes the variable sStudentName, displays the student's active status as "true" or "false"
On Error Resume Next
    Dim sActiveStatus As String
    
    sSQL = "SELECT s.[active] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        sActiveStatus = rs.Fields(0)
    Else
        sActiveStatus = "true"
    End If
    
    Me.comboActive.Value = sActiveStatus
End Function

Function displayOutsideTrainingAndMedicalIssues() 'takes the variables (sOutsideTraining, sMedical), displays them in the corresponding text boxes.
    Me.txtOutsideTraining.Value = sOutsideTraining
    Me.txtMedicalIssues.Value = sMedical
End Function

Function getOutsideTrainingAndMedicalIssues() 'takes the variable sStudentName, sets the variables (sOutsideTraining, sMedical)
On Error Resume Next
    sSQL = "SELECT s.[outsideTraining], s.[medicalIssues] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        sOutsideTraining = rs.Fields(0)
        sMedical = rs.Fields(1)
    Else
        sOutsideTraining = ""
        sMedical = ""
    End If
End Function

Function displayCompleteAddress() 'takes the variables (sAddress, sCity, sState, sZip), displays them in corresponding form elements
    Me.txtAddress.Value = sAddress
    Me.comboCity.Value = sCity
    Me.comboState.Value = sState
    Me.txtZip.Value = sZip
End Function

Function getCompleteAddress() 'takes the variable sStudentName, sets the variables (sAddress, sCity, sState, sZip)
    sSQL = "SELECT s.[address], s.[city], s.[state], s.[zipCode] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        sAddress = rs.Fields(0)
        sCity = rs.Fields(1)
        sState = rs.Fields(2)
        sZip = rs.Fields(3)
    Else
        sAddress = ""
        sCity = ""
        sState = ""
        sZip = ""
    End If
End Function

Function displayDOBandAge() 'takes the variables (sDOB, iAge), displays them in the text boxes
    Me.txtDOB.Value = sDOB
    Me.txtAge.Value = iAge
End Function

Function getDOBfromDB(sStudentName As String) As String
    On Error Resume Next
    sSQL = "SELECT s.[DOB] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        getDOBfromDB = rs.Fields(0)
    Else
        getDOBfromDB = ""
    End If
End Function

Function displayMobileCarrier() 'takes the variable sMobileCarrier, displays it in the combo box
    Me.comboMobileCarrier.Value = sMobileCarrier
End Function

Function getMobileCarrier() 'takes the variable sStudentName, sets the variable sMobileCarrier
    sSQL = "SELECT s.[mobileCarrier] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        sMobileCarrier = rs.Fields(0)
    Else: sMobileCarrier = ""
    End If
End Function

Function displayParentName() 'takes the variable sParentName, displays it in the parent name text box
    Me.txtParentName.Value = sParentName
End Function

Function getParentName() 'takes the variable sStudentName, sets the variable sParentName
    sSQL = "SELECT s.[parentName] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        sParentName = rs.Fields(0)
    Else: sParentName = ""
    End If
End Function

Function getAndDisplayComments() 'takes the variable sStudentName, displays comments
    sSQL = "SELECT s.[comments] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        sComments = rs.Fields(0)
    Else: sComments = ""
    End If
    
    Me.txtComments = sComments
End Function

Function displayTimeInRankComboBox()
    Me.comboYearsInRank.Value = 0
    Me.comboMonthsInRank.Value = iMonthsInRank
End Function

Function displayPromoDate()
    Me.txtDateOfLastPromotion.Value = sPromoDate
End Function

Function getPromoDate() 'takes the variable sStudentName, sets the variable sPromoDate
    sSQL = "SELECT s.[promotionDate] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        sPromoDate = rs.Fields(0)
    Else: sPromoDate = ""
    End If
End Function

Function displayPhoneAndEmail() 'takes the variables (sPhoneNumber, sEmail), displays them in txtPhoneNumber, txtEmail
    Me.txtPhoneNumber.Value = sPhoneNumber
    Me.txtEmail.Value = sEmail
End Function

Function getPhoneAndEmail() 'takes the variable sStudentName, sets the variables sPhoneNumber, sEmail
    sSQL = "SELECT s.[phoneNumber], s.[email] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        sPhoneNumber = rs.Fields(0)
        sEmail = rs.Fields(1)
    Else
        sPhoneNumber = ""
        sEmail = ""
    End If
End Function

Function displayPaymentStatus() 'takes the variables sPaymentStatus, displays the payment status in the text box
    Me.txtPaymentStatus.Value = sPaymentStatus
End Function

Function getPaymentStatus() 'takes the variable sStudentName, sets the variable sPaymentStatus
    Set dbs = CurrentDb
    sSQL = "SELECT s.[paymentStatus] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    'MsgBox ("sSQL = " & sSQL)
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        'MsgBox ("rs.Fields(0) = " & rs.Fields(0))
        sPaymentStatus = rs.Fields(0)
    Else: sPaymentStatus = ""
    End If
End Function

Function getRate() 'takes the variable sStudentName, sets the variable sglMonthlyRate
    sSQL = "SELECT s.[monthlyRate] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        sglMonthlyRate = rs.Fields(0)
    Else: sglMonthlyRate = 0
    End If
End Function

Function displayMonthlyRate() 'takes the variable sglMonthlyRate, displays it in the text box txtMonthlyRate
    Me.txtRate.Value = sglMonthlyRate
End Function

Function displayTimeSpentInRank()
    sMonthsInRank = (iMonthsInRank & " months")
    Me.txtTimeSpentInRank.Value = sMonthsInRank
End Function

Function displayMonthsToNextPromo()
    sMonthsToNextRank = (bytMonthsToNextPromo & " months")
    Me.txtNearestPossiblePromo.Value = sMonthsToNextRank
End Function

Function displayStudentCurrentRank() 'takes the variable sStudentRank and displays it in the rank combo box
    Me.comboStudentRank.Value = sStudentRank
End Function

Function setStudentPicture()
    Set dbs = CurrentDb
    sSQL = "SELECT s.[picture] FROM Students AS s WHERE s.[studentName] = '" & sStudentName & "';"
    Set rs = dbs.OpenRecordset(sSQL, dbOpenDynaset)
    If rs.RecordCount > 0 Then
        sRelativeFilePath = rs.Fields(0)
        sFullFilePath = (Application.CurrentProject.Path & "\images\" & sRelativeFilePath)
    Else
        sFullFilePath = (Application.CurrentProject.Path & "\images\" & "blank profile pic.bmp")
    End If
    
    Me.imgNewStudent.Picture = sFullFilePath
End Function

Private Sub comboSelectedStudent_GotFocus()
    Call comboSelectedStudent_Click
End Sub

Private Sub comboStudentRank_Click()
    sStudentRank = Me.comboStudentRank.Value
    Call getTimeRequirementForCurrentRank 'takes the variable sStudentRank, sets the variable iMonths
    Call putTimeRequirementForCurrentRankInTextBox 'takes the vaiable iMonths, displays iMonths + " months" in the rank time requirement text box
End Sub

Private Sub Command695_Click()
    Me.comboSelectedStudent.SetFocus
    'Me.comboSelectedStudent.SelText = "Rick Vogt"
    MsgBox ("me.comboSelectedStudent.SelText = " & Me.comboSelectedStudent.SelText)
End Sub

Private Sub imgNewStudent_Click()
    sError = "image"
    sStudentName = Me.lblStudentName.Caption
    On Error GoTo ErrorHandler
    Dim varFile As Variant
    Dim sFileName As String
    Dim fDialog As Object
    Set fDialog = Application.FileDialog(3)
    
    'MsgBox ("Please ensure you are uploading your image from the images folder. Images selected/uploaded from other folders will not be saved.")
    With fDialog
        AllowMultiSelect = False
        .InitialFileName = (Application.CurrentProject.Path & "\images\")
    
        If fDialog.Show = True Then
            For Each varFile In .SelectedItems
                sFilePathAndName = varFile
                'MsgBox ("'" & sFilePathAndName & "'")
                sSpaceSeperatedFilePath = Replace(sFilePathAndName, "\", " ")
                'MsgBox (sSpaceSeperatedFilePath)
                'sSpaceSeperatedFilePath = "images"
                
                If InStr(sSpaceSeperatedFilePath, "images") Then
                    'MsgBox ("images is in string")
                    Me.imgNewStudent.Picture = sFilePathAndName
                    'get relative image path
                    indexOfImages = InStr(1, sFilePathAndName, "images")
                    sRelativeFilePath = Right(sFilePathAndName, Len(sFilePathAndName) - indexOfImages - 6)
                    'update the DB
                    sSQL = "Update Students SET Students.[picture] = '" & sRelativeFilePath & "' WHERE Students.[studentName] = '" & sStudentName & "';"
                    DoCmd.RunSQL sSQL
                    'MsgBox ("picture saved. ")
                Else: MsgBox ("You must upload/select an image from the IMAGES FOLDER. Images selected/uploaded from other folders will not be saved")
                      Call imgNewStudent_Click
                End If
            Next
        End If
    End With
    'MsgBox "file choosen = " & f.Type
Exit Sub
ErrorHandler:
    If (sError = "image") Then
        MsgBox ("image error occurred. Make sure you select an image file from the images folder. ")
    ElseIf (sError = "student name") Then
          MsgBox ("student error occurred")
    Else: MsgBox ("And unknown error occurred. ")
    End If

End Sub

Private Sub lblChangeImage_Click()
    Call imgNewStudent_Click
End Sub

Private Sub lblPromoteNow_Click()
    Dim sMessage As String
    Dim userSelection As Integer
    
    sRank = Me.comboStudentRank.Value

    If (sRank = "10th kyu - white") Then
        sNewRank = "9th kyu - blue I"
    ElseIf (sRank = "9th kyu - blue I") Then
        sNewRank = "8th kyu - blue II"
    ElseIf (sRank = "8th kyu - blue II") Then
        sNewRank = "7th kyu - blue III"
    ElseIf (sRank = "7th kyu - blue III") Then
        sNewRank = "6th kyu - green I"
    ElseIf (sRank = "6th kyu - green I") Then
        sNewRank = "5th kyu - green II"
    ElseIf (sRank = "5th kyu - green II") Then
        sNewRank = "4th kyu - green III"
    ElseIf (sRank = "4th kyu - green III") Then
        sNewRank = "3rd kyu - brown I"
    ElseIf (sRank = "3rd kyu - brown I") Then
        sNewRank = "2nd kyu - brown II"
    ElseIf (sRank = "2nd kyu - brown II") Then
        sNewRank = "1st kyu - brown III"
    ElseIf (sRank = "1st kyu - brown III") Then
        sNewRank = "Shodan - black I"
    ElseIf (sRank = "Shodan - black I") Then
        sNewRank = "Nidan - black II"
    ElseIf (sRank = "Nidan - black II") Then
        sNewRank = "Sandan - black III"
    ElseIf (sRank = "Sandan - black III") Then
        sNewRank = "Yandan - black IV"
    ElseIf (sRank = "Yandan - black IV") Then
        sNewRank = "Godan - black V"
    ElseIf (sRank = "Godan - black V") Then
        sNewRank = "Rokudan - black VI"
    ElseIf (sRank = "Rokudan - black VI") Then
        sNewRank = "Shichidan - black VII"
    ElseIf (sRank = "Shichidan - black VII") Then
        sNewRank = "Hachidan - black VIII"
    ElseIf (sRank = "Hachidan - black VIII") Then
        sNewRank = "Kudan - black IX"
    ElseIf (sRank = "Kudan - black IX") Then
        sNewRank = "Chuck Norris"
    End If
    
    sMessage = ("Student will be promoted from '" & sRank & "' to '" & sNewRank & "'. Time in rank will be set to 0 months." & vbCrLf & _
                "(You can adjust the time in rank after the student is promoted)")
    userSelection = MsgBox(sMessage, vbOKCancel, "confirm promotion")
    
    If (userSelection = vbOK) Then
        Call promoteStudentAndUpdateTable 'takes the variable sNewRank
    Else
        'MsgBox ("The Cancel button was clicked")
    End If

End Sub

Function promoteStudentAndUpdateTable() 'takes the variable sNewRank
    dtToday = Date
    sStudentNameOrID = Me.comboSelectedStudent.Value 'sometimes this comes out as the ID, sometimes it's a name :p
    
    If IsNumeric(sStudentNameOrID) Then
        iStudentID = sStudentNameOrID
        sSQL = "UPDATE Students SET currentRank = '" & sNewRank & "', promotionDate = #" & dtToday & "#, monthsInRank = 0 WHERE studentID = " & iStudentID & ";"
    Else 'this is the name
        sStudentName = sStudentNameOrID
        sSQL = "UPDATE Students SET currentRank = '" & sNewRank & "', promotionDate = #" & dtToday & "#, monthsInRank = 0 WHERE studentName = '" & sStudentName & "';"
    End If
    
    'MsgBox (sSQL)
    DoCmd.RunSQL sSQL
    Call btnRefresh_Click
End Function

Private Sub lblShowAllRankReq_Click()
    sSQL = "SELECT * FROM RankRequirements"
    Me.subformRankReq.Form.RecordSource = sSQL
    Me.subformRankReq.Requery
    Me.subformRankReq.Height = 6500
End Sub

Private Sub lblShowRankReqOnlyThisStudent_Click()
    Call showRankReq
End Sub

Private Sub lblViewCerts_Click()
    On Error Resume Next
    DoCmd.OpenForm FormName:="Certs"
    Call setStudentNameOnCertsForm
    Call Forms("Certs").refreshForm
End Sub

Private Function setStudentNameOnCertsForm()
    sStudentName = Me.lblStudentName.Caption
    Forms!Certs!comboSelectedStudent.Value = sStudentName
    Forms!Certs!comboSelectedStudent.SetFocus
    Forms!Certs!comboSelectedStudent.SelText = sStudentName

    Forms!Certs!lblStudentName.Caption = sStudentName
End Function

Private Sub txtDateOfLastPromotion_AfterUpdate()
    On Error Resume Next
    Set dbs = CurrentDb
    'get the last promotion date entered by user in form.
    If (IsNull(Me.txtDateOfLastPromotion.Value) Or Me.txtDateOfLastPromotion.Value = "" Or Not (IsDate(Me.txtDateOfLastPromotion.Value))) Then
        MsgBox ("'" & Me.txtDateOfLastPromotion.Value & "' is not a valid date. " & vbCrLf & _
                "If the student does not have any promotion date, enter the date when he/she began training as a white belt.") 'if no valid previous promotion date was entered, send error msg to the user.
    Else
        dtOfPromo = CDate(Me.txtDateOfLastPromotion.Value) 'get the date from the text box and cast it to a date variable
        Call calculateTimeInRankAndFillComboBoxes
    End If
End Sub

Function calculateTimeToNextPossiblePromoAndFillComboBoxes()
    Call getTimeToNextPossiblePromo 'sets the variable iMonthsRemaining via the calculateTimeToNextPossiblePromo Function
    iMonths = iMonthsRemaining ': MsgBox ("iMonths = " & iMonths)
    Call getYearsAndMonths 'takes variable iMonths and spits out iYears iMonths
    MsgBox ("iYears = " & iYears & ". iMonths = " & iMonths)
End Function

Function calculateTimeInRankAndFillComboBoxes()
    Call getTheDifferenceBetweenLastPromoAndToday 'sets the variable iMonths
    Call getYearsAndMonths 'takes iMonths variable and spits out iYears iMonths
    Call putYearMonthDifferenceInComboBoxes 'takes the variables (iYears, iMonths), displays them in comboYearsInRank & comboMonthsInRank
End Function

Function getTimeToNextPossiblePromo()
    Call getCurrentRankForNewStudent 'sets the variable sStudentRank
    Call getTimeRequirementForCurrentRank 'sets the variable iMonths
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'MsgBox ("time req for current rank = " & iMonths & " months")
    Call getMonthsInRankFromComboBoxes 'sets the variable iMonthsCompleted
    'MsgBox ("months in rank already = " & iMonthsCompleted)
    Call calculateTimeToNextPossiblePromo 'sets the variable iMonthsRemaining
    'MsgBox ("time to next possible promo is " & iMonthsRemaining & " months")
End Function
 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function getCurrentRankForNewStudent() 'sets the variable sStudentRank
    sStudentRank = Me.comboStudentRank.Value
End Function

Function calculateTimeToNextPossiblePromo()
    iMonthsRemaining = (iMonths - iMonthsCompleted)
End Function

Function getPercentageOfReqFulfilled()
    sglPercentageOfReqFulfilled = (iMonthsCompleted / iRankMonthReq)
End Function

Function getMonthsInRankFromComboBoxes() ' sets the variable iMonthsComplete (gets it from the combo boxes on new student entry)
    iYearsInRank = Me.comboYearsInRank.Value
    iMonthsCompleted = Me.comboMonthsInRank.Value
    'MsgBox ("iYearsInRank = " & iYearsInRank & vbCrLf & "iMonthsCompleted = " & iMonthsCompleted)
    iMonthsCompleted = (iMonthsCompleted + (iYearsInRank * 12))
    'MsgBox ("iMonthsCompleted = " & iMonthsCompleted)
End Function

Function getTheDifferenceBetweenLastPromoAndToday()
    dtToday = Date 'get today's date
    sglDateDiffInDays = DateDiff("d", dtOfPromo, dtToday) 'get the difference in days between last promo and today
    'the time in Rank will be = to the number of days between their last promotion and today/30.4, rounded down to the nearest 30.
    sglDateDiffInMonths = (sglDateDiffInDays / 30.4386383333333)      'get the number of months
    sDateDiffInMonths = CStr(sglDateDiffInMonths) 'cast months to string and get rid of decimals to round down
    While (InStr(sDateDiffInMonths, ".")) 'if there is a decimal in the string, keep removing the last char in the string until the decimal is gone.
        sDateDiffInMonths = Left(sDateDiffInMonths, Len(sDateDiffInMonths) - 1)
    Wend
    iMonths = CInt(sDateDiffInMonths)
End Function

Function getYearsAndMonths() 'takes iMonths (0 to infinity) and converts it to years and months
    If (iMonths <= 0) Then 'if iMonths is 0 or less than 0
        iYears = 0: iMonths = 0
    ElseIf (iMonths = 1) Then 'because if you divide 1 by x you get scientific notation, which messes things up
        iYears = 0: iMonths = 1
    Else
        sglYears = (iMonths / 12) 'if months are more than 1, divide months by 12 to get years
        'MsgBox ("sglYears = " & sglYears)
        'get rid of any decimals in the years value
        sYears = CStr(sglYears)
        While (InStr(sYears, ".")) 'if there is a decimal in years the string, keep removing the last char in the string until the decimal is gone.
            sYears = Left(sYears, Len(sYears) - 1)
        Wend
        'MsgBox ("sYears = " & sYears)
        iYears = CInt(sYears)
        'MsgBox ("iYears = " & iYears)
        
        'get the number of months - years
        iMonths = (iMonths - (iYears * 12))
    End If
End Function

Function putYearMonthDifferenceInComboBoxes() 'takes the variables (iYears, iMonths), displays them in comboYearsInRank & comboMonthsInRank
    Me.comboYearsInRank.Value = iYears
    Me.comboMonthsInRank.Value = iMonths
End Function
 
Private Sub txtDOB_LostFocus()
    Call validateDOB 'sets the variables (boolValidDOB, dtDOB, dtToday)
    If (boolValidDOB = True) Then
        iAge = getAgeFromDOB(dtDOB)
        Me.txtAge.Value = iAge
    Else: MsgBox ("Invalid date of birth. The date selected cannot be after today's date. ")
    End If
End Sub

Function getAgeFromDOB(Optional ByVal dtDOB As Date = 6 / 13 / 1700, Optional ByVal sDOB As String = "") As Integer
    Dim dtBirthdayThisYear As Date
    Dim sBirthDate As String
    Dim sBirthDateThisYear As String
    Dim sThisYear As String
    Dim sDateToday As String
    
    If (sDOB <> "") Then dtDOB = CDate(sDOB) 'if date was sent as a string then convert it to a date object
    
    dtToday = Date
    iAge = DateDiff("yyyy", dtDOB, dtToday) 'this gives the DOB only if Bday has already happened this year.
    'check to see if birthday has happened yet this year
    sBirthDate = CStr(dtDOB)
    sDateToday = CStr(dtToday)
    sThisYear = Right(sDateToday, 4)
    sBirthDateThisYear = Left(sBirthDate, Len(sBirthDate) - 4) 'month and day
    sBirthDateThisYear = (sBirthDateThisYear & sThisYear) 'add year
    dtBirthdayThisYear = CDate(sBirthDateThisYear)
    If (dtBirthdayThisYear > dtToday) Then 'birthday hasn't happened yet this year
        iAge = (iAge - 1)
    End If
    
    getAgeFromDOB = iAge
End Function

Function validateDOB() 'sets the variables (boolValidDOB, dtDOB, dtToday)
On Error Resume Next
    If IsNull(Me.txtDOB.Value) Then
        boolValidDOB = False
    Else
        dtDOB = Me.txtDOB.Value
        dtToday = Date
        If (dtDOB > dtToday) Then
            boolValidDOB = False
        Else: boolValidDOB = True
        End If
    End If
End Function

Private Sub txtNearestPossiblePromo_Click()
    'MsgBox "This is a read-only field. To change the value use the 'time in current rank' combo boxes below."
    'Me.comboMonthsInRank.SetFocus
End Sub

Private Sub txtRankTimeReq_Click()
    MsgBox "This field is read only. If you wish to edit the time requirements for ranks please open the rank requirements page."
End Sub

Private Sub txtTimeSpentInRank_Click()
    'MsgBox "This is a read-only field. To change the value use the 'time in current rank' combo boxes below."
    'Me.comboMonthsInRank.SetFocus
End Sub

Function showRankReq() 'gets the variable sRank from the text box, displays rank req in subform
On Error Resume Next
    sRank = Me.comboStudentRank.Value
    Call convertRankToRankReq 'takes the variable sRank, sets the variable sRank
    sSQL = "SELECT * FROM RankRequirements WHERE RankRequirements.[rank] = '" & sRank & "';"
    Me.subformRankReq.Form.RecordSource = sSQL
    Me.subformRankReq.Requery
    Me.subformRankReq.Height = 1200
End Function

Function convertRankToRankReq() 'takes the variable sRank, sets the variable sRank
    If (sRank = "10th kyu - white") Then
        sRank = "10th kyu white belt - promote to 9th kyu"
    ElseIf (sRank = "9th kyu - blue I") Then
        sRank = "9th kyu blue I - promote to 8th kyu"
    ElseIf (sRank = "8th kyu - blue II") Then
        sRank = "8th kyu blue II - promote to 7th kyu"
    ElseIf (sRank = "7th kyu - blue III") Then
        sRank = "7th kyu blue III - promote to 6th kyu"
    ElseIf (sRank = "6th kyu - green I") Then
        sRank = "6th kyu green I - promote to 5th kyu"
    ElseIf (sRank = "5th kyu - green II") Then
        sRank = "5th kyu green II - promote to 4th kyu"
    ElseIf (sRank = "4th kyu - green III") Then
        sRank = "4th kyu green III - promote to 3rd kyu"
    ElseIf (sRank = "3rd kyu - brown I") Then
        sRank = "3rd kyu brown I - promote to 2nd kyu"
    ElseIf (sRank = "2nd kyu - brown II") Then
        sRank = "2nd kyu brown II - promote to 1st kyu"
    ElseIf (sRank = "1st kyu - brown III") Then
        sRank = "1st kyu brown III - promote to Shodan"
    ElseIf (sRank = "Shodan - black I") Then
        sRank = "Shodan black I - promote to Nidan"
    ElseIf (sRank = "Nidan - black II") Then
        sRank = "Nidan black II - promote to Sondan"
    ElseIf (sRank = "Sandan - black III") Then
        sRank = "Sondan black III - promote to Yondan"
    ElseIf (sRank = "Yandan - black IV") Then
        sRank = "Yondan black IV - promote to Godan"
    ElseIf (sRank = "Godan - black V") Then
        sRank = "Godan black V - promote to Rokudan"
    ElseIf (sRank = "Rokudan - black VI") Then
        sRank = "Rokudan black VI - promote to Nanadan"
    ElseIf (sRank = "Shichidan - black VII") Then
        sRank = "Shichidan black VII - promote to Hachidan"
    ElseIf (sRank = "Hachidan - black VIII") Then
        sRank = "Hachidan - black VIII - promote to Kudan"
    ElseIf (sRank = "Kudan - black IX") Then
        sRank = "Kudan - black IX"
    End If
End Function

Private Sub txtViewCerts_Click()
    On Error Resume Next
    DoCmd.OpenForm FormName:="Certs"
    Call setStudentNameOnCertsForm
    Call Forms("Certs").refreshForm
End Sub


